@model ProductModel

@using Nop.Core.Domain.Catalog;
@using Nop.Services.Catalog;
@using System.Text;
@using Nop.Services
@using Nop.Services.Customers
@using Nop.Services.Stores
@using Nop.Core;
@using Nop.Core.Domain.Customers;
@using Nop.Core.Infrastructure;
@using Nop.Services.Customers;


@{
    //resources for product tags input
    Html.AppendCssFileParts("~/Administration/Content/tagEditor/jquery.tag-editor.css");
    Html.AppendScriptParts("~/Administration/Scripts/tagEditor/jquery.tag-editor.min.js");
    Html.AppendScriptParts("~/Administration/Scripts/tagEditor/jquery.caret.min.js");
}
<!-- #region NU-18 -->
@{
    var dayList = new List<KeyValuePair<int, string>>
    {
        new KeyValuePair<int, string>(0, "0"),
        new KeyValuePair<int, string>(1, "1"),
        new KeyValuePair<int, string>(2, "2"),
        new KeyValuePair<int, string>(3, "3"),
        new KeyValuePair<int, string>(4, "4"),
        new KeyValuePair<int, string>(5, "5"),
        new KeyValuePair<int, string>(6, "6"),
        new KeyValuePair<int, string>(7, "7"),
        new KeyValuePair<int, string>(8, "8"),
        new KeyValuePair<int, string>(9, "9"),
        new KeyValuePair<int, string>(10, "10"),
    };

    var dayDropDown = dayList.Select(t => new SelectListItem
    {
        Text = t.Value,
        Value = t.Value,
        Selected = Model != null && t.Value == Model.ProductionDaysLead.GetValueOrDefault(0).ToString()
    });


    var hoursList = new List<KeyValuePair<int, string>>
    {
        new KeyValuePair<int, string>(0, "0"),
        new KeyValuePair<int, string>(1, "1"),
        new KeyValuePair<int, string>(2, "2"),
        new KeyValuePair<int, string>(3, "3"),
        new KeyValuePair<int, string>(4, "4"),
        new KeyValuePair<int, string>(5, "5"),
        new KeyValuePair<int, string>(6, "6"),
        new KeyValuePair<int, string>(7, "7"),
        new KeyValuePair<int, string>(8, "8"),
        new KeyValuePair<int, string>(9, "9"),
        new KeyValuePair<int, string>(10, "10"),
        new KeyValuePair<int, string>(11, "11"),
        new KeyValuePair<int, string>(12, "12"),
    };


    var limitTypeList = new List<KeyValuePair<int, string>>
    {
        new KeyValuePair<int, string>(0, "None"),
        new KeyValuePair<int, string>(2, "Commuters Only"),
    };

    var limitTypeDropDown = limitTypeList.Select(t => new SelectListItem
    {
        Text = t.Value,
        Value = t.Key.ToString(),
        Selected = Model != null && t.Value == Model.LimitPurchaseType.GetValueOrDefault(0).ToString()
    });


    var hoursDropDown = hoursList.Select(t => new SelectListItem
    {
        Text = t.Value,
        Value = t.Value,
        Selected = Model != null && t.Value == Model.ProductionHoursLead.GetValueOrDefault(0).ToString()
    });

    var minutesList = new List<KeyValuePair<int, string>>
    {
        new KeyValuePair<int, string>(0, "0"),
        new KeyValuePair<int, string>(5, "5"),
        new KeyValuePair<int, string>(10, "10"),
        new KeyValuePair<int, string>(15, "15"),
        new KeyValuePair<int, string>(30, "30"),
        new KeyValuePair<int, string>(45, "45"),
    };

    var minutesDropDown = minutesList.Select(t => new SelectListItem
    {
        Text = t.Value,
        Value = t.Value,
        Selected = Model != null && t.Value == Model.ProductionMinutesLead.GetValueOrDefault(0).ToString()
    });
}
<!-- #endregion -->

<script type="text/javascript">
    $(window).load(function() {
        @if (Model.IsLoggedAs == "STORE.ADMIN")
        {
            <text>$('#mappingId').hide();</text>
            <text>$('.mce-container, .mce-container-body').css("pointer-events", "none");</text>
            <text>$('.mce-container.mce-menubar.mce-toolbar.mce-first.mce-stack-layout-item').css("display", "none");</text>
            <text>$('.mce-toolbar-grp.mce-container.mce-panel.mce-stack-layout-item').css("display", "none");</text>
            <text>$('.mce-statusbar.mce-container.mce-panel.mce-last.mce-stack-layout-item').css("display", "none");</text>

        }
        else
        {
            <text>$('#mappingId').show();</text>
        }
    });
    function yesnoCheck() {
        if (document.getElementById('rd1min').checked) {
            $('#customReservationInterval').show();
        }
        else $('#customReservationInterval').hide();;
    }
    $(document).ready(function () {
       // $('#customReservationInterval').hide();
        
        @if (Model.IsLoggedAs == "STORE.ADMIN")
        {
             <text>$('#Gtin').attr("readonly", "readonly");</text>
             <text>$('#Price').attr("readonly", "readonly");</text>
             <text>$('#SpecialPrice').attr("readonly", "readonly");</text>
             <text>$('#SelectedCustomerRoleIds').attr("readonly", "readonly");</text>
             <text>$('#TaxCategoryId').css("pointer-events", "none");</text>
             <text>$('#TaxCategoryId').css("-webkit-appearance", "none");</text>
			 <text>$('#TaxCategoryId').css("-moz-appearance", "none");</text>
			 <text>$('#TaxCategoryId').css("appearance", "none");</text>
            <text>$('#divShipping').find('input, textarea, select').attr("disabled", true);</text>

        }
        @if (Model.TaxCategoryId == -1)
        {
             <text>$('#SpecialPrice').attr("readonly", "readonly");</text>
        }


        @if (!Model.IsLoggedInAsVendor)
        {
            <text>$("#@Html.FieldIdFor(model => model.ShowOnHomePage)").click(toggleShowOnHomePage);</text>
        }
        /**/
        $("#@Html.FieldIdFor(model => model.ProductTypeId)").change(toggleProductType);
        $("#@Html.FieldIdFor(model => model.RequireOtherProducts)").click(toggleRequireOtherProducts);
        $("#@Html.FieldIdFor(model => model.AvailableForPreOrder)").click(togglePreOrder);
        $("#@Html.FieldIdFor(model => model.IsGiftCard)").click(toggleGiftCard);
        $("#@Html.FieldIdFor(model => model.CustomerEntersPrice)").click(toggleCustomerEntersPrice);
        $("#@Html.FieldIdFor(model => model.BasepriceEnabled)").click(toggleBasepriceEnabled);
        $("#@Html.FieldIdFor(model => model.IsDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.UnlimitedDownloads)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasSampleDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasUserAgreement)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.IsRecurring)").click(toggleRecurring);
        $("#@Html.FieldIdFor(model => model.IsRental)").click(toggleRental);
        $("#@Html.FieldIdFor(model => model.IsDonation)").click(toggleDonation);
        $("#@Html.FieldIdFor(model => model.IsShipEnabled)").click(toggleShipping);
        $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);
        $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.UseMultipleWarehouses)").click(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.BackorderModeId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.DisplayStockAvailability)").click(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.MarkAsNew)").click(toggleMarkAsNew);
        $("#@Html.FieldIdFor(model => model.IsPickupEnabled)").click(togglePickup);	// NU-13
        $("#@Html.FieldIdFor(model => model.LimitPurchase)").click(toggleLimitProduct);
        $("#@Html.FieldIdFor(model => model.IsReservation)").click(toggleReservation);

        @if (!Model.IsLoggedInAsVendor)
        {
            <text>toggleShowOnHomePage();</text>
        }
        toggleProductType();
        togglePreOrder();
        toggleDonation();
        toggleRequireOtherProducts();
        toggleGiftCard();
        toggleCustomerEntersPrice();
        toggleBasepriceEnabled();
        toggleDownloadableProduct();
        toggleRecurring();
        toggleRental();
        toggleShipping();
        toggleTax();
        toggleManageStock();
        toggleMarkAsNew();
        togglePickup();
        toggleLimitProduct();
        toggleReservation();
        // NU-13
    });

    function toggleShowOnHomePage() {
        if ($('#@Html.FieldIdFor(model => model.ShowOnHomePage)').is(':checked')) {
            $('#pnlDisplayOrder').show();
        } else {
            $('#pnlDisplayOrder').hide();
        }
    }

    function toggleProductType() {
        var selectedProductTypeId = $("#@Html.FieldIdFor(model => model.ProductTypeId)").val();
        if (!selectedProductTypeId || selectedProductTypeId == @(((int)ProductType.SimpleProduct).ToString()))
        {
        $('#group-prices').show();
        $('#tier-prices').show();
        $('#group-required-other-products').show();
        $('#group-giftcard').show();
        $('#group-downloads').show();
        $('#group-recurring').show();
        $('#group-rental').show();
        $('#group-shipping').show();
        $('#group-inventory').show();
        $('#group-associated-products').hide();
    }
    else if (selectedProductTypeId == @(((int)ProductType.GroupedProduct).ToString()))
    {
        $('#group-prices').hide();
        $('#tier-prices').hide();
        $('#group-required-other-products').hide();
        $('#group-giftcard').hide();
        $('#group-downloads').hide();
        $('#group-recurring').hide();
        $('#group-rental').hide();
        $('#group-shipping').hide();
        $('#group-inventory').hide();
        $('#group-associated-products').show();
    }
    }

    function togglePreOrder() {
        if ($('#@Html.FieldIdFor(model => model.AvailableForPreOrder)').is(':checked')) {
            $('#pnlPreOrderAvailabilityStartDateTimeUtc').show();
        } else {
            $('#pnlPreOrderAvailabilityStartDateTimeUtc').hide();
        }
    }

    function toggleRequireOtherProducts() {
        if ($('#@Html.FieldIdFor(model => model.RequireOtherProducts)').is(':checked')) {
            $('#pnlRequiredProductIds').show();
            $('#pnlAutomaticallyAddRequiredProducts').show();
            $('#requiredOtherProductsOption').show();
        } else {
            $('#pnlRequiredProductIds').hide();
            $('#pnlAutomaticallyAddRequiredProducts').hide();
            $('#requiredOtherProductsOption').hide();
        }
    }

    function toggleGiftCard() {
        if ($('#@Html.FieldIdFor(model => model.IsGiftCard)').is(':checked')) {
            $('#pnlGiftCardType').show();
            $('#pnlOverriddenGiftCardAmount').show();
        } else {
            $('#pnlGiftCardType').hide();
            $('#pnlOverriddenGiftCardAmount').hide();
        }
    }
    function toggleLimitProduct() {
        if ($('#@Html.FieldIdFor(model => model.LimitPurchase)').is(':checked')) {
            $('#MaxQuantityDiv').show();
            $('#LimitPurchaseTypeDiv').show();
        } else {
            $('#MaxQuantityDiv').hide();
            $('#LimitPurchaseTypeDiv').hide();
        }
    }

    function toggleCustomerEntersPrice() {
        if ($('#@Html.FieldIdFor(model => model.CustomerEntersPrice)').is(':checked')) {
            $('#pnlMinimumCustomerEnteredPrice').show();
            $('#pnlMaximumCustomerEnteredPrice').show();
        } else {
            $('#pnlMinimumCustomerEnteredPrice').hide();
            $('#pnlMaximumCustomerEnteredPrice').hide();
        }
    }

    function toggleBasepriceEnabled() {
        if ($('#@Html.FieldIdFor(model => model.BasepriceEnabled)').is(':checked')) {
            $('#pnlBasepriceAmount').show();
            $('#pnlBasepriceUnit').show();
            $('#pnlBasepriceBaseAmount').show();
            $('#pnlBasepriceBaseUnit').show();
        } else {
            $('#pnlBasepriceAmount').hide();
            $('#pnlBasepriceUnit').hide();
            $('#pnlBasepriceBaseAmount').hide();
            $('#pnlBasepriceBaseUnit').hide();
        }
    }

    function toggleDownloadableProduct() {
        if ($('#@Html.FieldIdFor(model => model.IsDownload)').is(':checked')) {
            $('#pnlDownloadFile').show();
            $('#pnlUnlimitedDownloads').show();
            if ($('#@Html.FieldIdFor(model => model.UnlimitedDownloads)').is(':checked')) {
                $('#pnlMaxNumberOfDownloads').hide();
            } else {
                $('#pnlMaxNumberOfDownloads').show();
            }
            $('#pnlDownloadExpirationDays').show();
            $('#pnlDownloadActivationType').show();

            $('#pnlHasUserAgreement').show();
            if ($('#@Html.FieldIdFor(model => model.HasUserAgreement)').is(':checked')) {
                $('#pnlUserAgreementText').show();
            } else {
                $('#pnlUserAgreementText').hide();
            }

            $('#pnlHasSampleDownload').show();

            if ($('#@Html.FieldIdFor(model => model.HasSampleDownload)').is(':checked')) {
                $('#pnlSampleDownloadFile').show();
            } else {
                $('#pnlSampleDownloadFile').hide();
            }
        } else {
            $('#pnlDownloadFile').hide();
            $('#pnlUnlimitedDownloads').hide();
            $('#pnlMaxNumberOfDownloads').hide();
            $('#pnlDownloadExpirationDays').hide();
            $('#pnlDownloadActivationType').hide();
            $('#pnlHasUserAgreement').hide();
            $('#pnlUserAgreementText').hide();
            $('#pnlHasSampleDownload').hide();
            $('#pnlSampleDownloadFile').hide();
        }
    }

    function toggleShipping() {
        if ($('#@Html.FieldIdFor(model => model.IsShipEnabled)').is(':checked')) {
            $('#pnlFreeShipping').show();
            $('#pnlShipSeparately').show();
            $('#pnlAdditionalShippingCharge').show();
            $('#pnlWeight').show();
            $('#pnlLength').show();
            $('#pnlWidth').show();
            $('#pnlHeight').show();
            $('#pnlDeliveryDate').show();
        } else {
            $('#pnlFreeShipping').hide();
            $('#pnlShipSeparately').hide();
            $('#pnlAdditionalShippingCharge').hide();
            $('#pnlWeight').hide();
            $('#pnlLength').hide();
            $('#pnlWidth').hide();
            $('#pnlHeight').hide();
            $('#pnlDeliveryDate').hide();
        }
    }

    function toggleRecurring() {
        if ($('#@Html.FieldIdFor(model => model.IsRecurring)').is(':checked')) {
            $('#pnlCycleLength').show();
            $('#pnlCyclePeriod').show();
            $('#pnlTotalCycles').show();
        } else {
            $('#pnlCycleLength').hide();
            $('#pnlCyclePeriod').hide();
            $('#pnlTotalCycles').hide();
        }
    }

    function toggleRental() {
        if ($('#@Html.FieldIdFor(model => model.IsRental)').is(':checked')) {
            $('#pnlRentalPriceLength').show();
            $('#pnlRentalPricePeriod').show();
        } else {
            $('#pnlRentalPriceLength').hide();
            $('#pnlRentalPricePeriod').hide();
        }
    }

    function toggleDonation() {
        if ($('#@Html.FieldIdFor(model => model.IsDonation)').is(':checked')) {
            $('#pnlDonationCorporateNotification').show();
        } else {
            $('#pnlDonationCorporateNotification').hide();
            $('#@Html.FieldIdFor(model => model.IsCorporateDonation)').attr('checked', false);
        }
    }

   function toggleReservation() {
        if ($('#@Html.FieldIdFor(model => model.IsReservation)').is(':checked')) {
            $('#pnlReservation').show();
        } else {
            $('#pnlReservation').hide();
            $('#@Html.FieldIdFor(model => model.IsReservation)').attr('checked', false);
        }
    }

    function toggleTax() {
        if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
            $('#pnlTaxCategory').hide();
            $('#pnlTaxCategory2').hide();
        } else {
            $('#pnlTaxCategory').show();
            $('#pnlTaxCategory2').show();

        }
    }

    function toggleManageStock() {
        var selectedManageInventoryMethodId = $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").val();
        if (selectedManageInventoryMethodId == @(((int)ManageInventoryMethod.DontManageStock).ToString())) {
            $('#pnlUseMultipleWarehouses').hide();
        $('#pnlWarehouse').show();
        $('#pnlMultipleWarehouses').hide();
        $('#pnlStockQuantity').hide();
        $('#pnlDisplayStockAvailability').hide();
        $('#pnlDisplayStockQuantity').hide();
        $('#pnlMinStockQuantity').hide();
        $('#pnlLowStockActivity').hide();
        $('#pnlNotifyForQuantityBelow').hide();
        $('#pnlAllowBackInStockSubscriptions').hide();
        $('#pnlBackorders').hide();
        $('#pnlAllowAddingOnlyExistingAttributeCombinations').hide();
    } else if (selectedManageInventoryMethodId == @(((int)ManageInventoryMethod.ManageStock).ToString())) {
        $('#pnlUseMultipleWarehouses').show();

        if ($('#@Html.FieldIdFor(model => model.UseMultipleWarehouses)').is(':checked')) {
            $('#pnlWarehouse').hide();
            $('#pnlMultipleWarehouses').show();
            $('#pnlStockQuantity').hide();
        } else {
            $('#pnlWarehouse').show();
            $('#pnlMultipleWarehouses').hide();
            $('#pnlStockQuantity').show();
        }

        $('#pnlDisplayStockAvailability').show();
        if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
            $('#pnlDisplayStockQuantity').show();
        } else {
            $('#pnlDisplayStockQuantity').hide();
        }

        $('#pnlMinStockQuantity').show();
        $('#pnlLowStockActivity').show();
        $('#pnlNotifyForQuantityBelow').show();
        $('#pnlBackorders').show();
        var selectedBackorderModeId = $("#@Html.FieldIdFor(model => model.BackorderModeId)").val();
        if (selectedBackorderModeId == @(((int)BackorderMode.NoBackorders).ToString())) {
            //no backorders
            $('#pnlAllowBackInStockSubscriptions').show();
    } else {
    //backorders are enabled
                $('#pnlAllowBackInStockSubscriptions').hide();
    }
    $('#pnlAllowAddingOnlyExistingAttributeCombinations').hide();
    } else {
        $('#pnlUseMultipleWarehouses').hide();
        $('#pnlWarehouse').show();
        $('#pnlMultipleWarehouses').hide();
        $('#pnlStockQuantity').hide();
        $('#pnlDisplayStockAvailability').show();
        if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
            $('#pnlDisplayStockQuantity').show();
        } else {
            $('#pnlDisplayStockQuantity').hide();
        }
        $('#pnlMinStockQuantity').hide();
        $('#pnlLowStockActivity').hide();
        $('#pnlNotifyForQuantityBelow').hide();
        $('#pnlAllowBackInStockSubscriptions').hide();
        $('#pnlBackorders').hide();
        $('#pnlAllowAddingOnlyExistingAttributeCombinations').show();
    }
    }

    function toggleMarkAsNew() {
        if ($('#@Html.FieldIdFor(model => model.MarkAsNew)').is(':checked')) {
            $('#pnlMarkAsNewStartDateTimeUtc').show();
            $('#pnlMarkAsNewEndDateTimeUtc').show();
        } else {
            $('#pnlMarkAsNewStartDateTimeUtc').hide();
            $('#pnlMarkAsNewEndDateTimeUtc').hide();
        }
    }

    // #region NU-13
    function togglePickup() {
        if ($('#@Html.FieldIdFor(model => model.IsPickupEnabled)').is(':checked')) {
            $('#pnlPickupWarehouse').show();
        } else {
            $('#pnlPickupWarehouse').hide();
        }
    }
    // #endregion

    @{
        //TODO move to Model
        var productTags = EngineContext.Current.Resolve<IProductTagService>().GetAllProductTags();
        var productTagsSb = new StringBuilder();
        productTagsSb.Append("var initialProductTags = [");
        for (int i = 0; i < productTags.Count; i++)
        {
            var tag = productTags[i];
            productTagsSb.Append("'");
            productTagsSb.Append(HttpUtility.JavaScriptStringEncode(tag.Name));
            productTagsSb.Append("'");
            if (i != productTags.Count - 1)
            {
                productTagsSb.Append(",");
            }
        }
        productTagsSb.Append("]");
    }

    //tags
    $(document).ready(function() {
        @Html.Raw(productTagsSb.ToString())
        $("#@Html.FieldIdFor(model => model.ProductTags)").tagEditor({
            autocomplete: {
                delay: 0,
                position: { collision: 'flip' },
                source: initialProductTags
            },
            delimiter: ',',
            placeholder: 'Enter tags ...'
        });
    });

    //required product friendly names
    $(document).ready(function() {
        loadRequiredProductFriendlyNames();
    });

    $(document).ready(function() {
        $('#@Html.FieldIdFor(model => model.RequiredProductIds)')
            .data('timeout', null)
            .keyup(function() {
                clearTimeout($(this).data('timeout'));
                //one second timeout
                $(this).data('timeout', setTimeout(loadRequiredProductFriendlyNames, 1000));
            });
    });

    function loadRequiredProductFriendlyNames() {
        var inputValue = $('#@Html.FieldIdFor(model => model.RequiredProductIds)').val();
        if (inputValue) {
            //load friendly names
            $('#required-products-check-progress').show();

            var postData = {
                productIds: inputValue
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: 'POST',
                url: '@Url.Action("LoadProductFriendlyNames", "Product")',
                data: postData,
                dataType: 'json',
                success: function(data) {
                    $('#required-products-check-progress').hide();
                    $('#required-product-names').text(data.Text);
                },
                failure: function() {
                    $('#required-products-check-progress').hide();
                    $('#required-product-names').text('');
                }
            });
        } else {
            $('#required-product-names').text('');
        }
    }
</script>

<div class="raw clearfix">
    <div class="@(Model.ProductEditorSettingsModel.OneColumnProductPage ? "col-md-12" : "col-md-7")">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.CommonInfo")
                </div>
                <div class="panel-body">
                    @if (Model.Id > 0)
                    {
                        <div class="form-group @(Model.ProductEditorSettingsModel.Id ? null : "advanced-setting")">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Id)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDisplayFor(model => model.Id)
                                @Html.ValidationMessageFor(model => model.Id)
                            </div>
                        </div>
                    }
                    <div class="form-group @(Model.ProductEditorSettingsModel.ProductType ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ProductTypeId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.ProductTypeId, ((ProductType)Model.ProductTypeId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.ProductTypeId)
                        </div>
                    </div>

                    @if (Model.Id > 0 && Model.AssociatedToProductId > 0)
                    {
                        <div class="form-group @(Model.ProductEditorSettingsModel.ProductType ? null : "advanced-setting")">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.AssociatedToProductId)
                            </div>
                            <div class="col-md-9">
                                @Html.ActionLink(Model.AssociatedToProductName, "Edit", "Product", new
                           {
                               id = Model.AssociatedToProductId
                           }, new { })
                            </div>
                        </div>
                    }
                    <div class="form-group @(Model.ProductEditorSettingsModel.ProductTemplate ? null : "advanced-setting")" @(Model.AvailableProductTemplates.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ProductTemplateId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.ProductTemplateId, Model.AvailableProductTemplates)
                            @Html.ValidationMessageFor(model => model.ProductTemplateId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.VisibleIndividually ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.VisibleIndividually)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.VisibleIndividually)
                            @Html.ValidationMessageFor(model => model.VisibleIndividually)
                        </div>
                    </div>
                    <!-- #region NU-10 -->


                    <div class="form-group @(Model.ProductEditorSettingsModel.IsMaster ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsMaster)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsMaster)
                                if (EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsSystemGlobalAdmin() && !Model.IsMaster)
                                {
                                    <button type="submit" id="btnAddNewRequiredProduct" onclick="javascript:OpenWindow('@Url.Action("Edit", "Product", new { id = Model.MasterId })', 800, 850, true); return false;" class="btn btn-info">
                                        View Master
                                    </button>
                                }
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsMaster)
                            }
                        </div>
                    </div>


                    <!-- #endregion -->
                    @(Html.LocalizedEditor<ProductModel, ProductLocalizedModel>("product-info-localized",
                    @<div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Published)
                            </div>
                            <div class="col-md-9">
                                @if (Model.IsLoggedAs == "ADMIN")
                                {
                                    @Html.NopEditorFor(model => model.Published)
                                }
                                else if (Model.IsLoggedAs == "STORE.ADMIN" && Model.VendorId != 0)
                                {
                                    @Html.NopDisplayFor(model => model.Published)
                                }
                                else if (Model.IsLoggedAs == "STORE.ADMIN" && Model.VendorId == 0)
                                {
                                    @Html.NopEditorFor(model => model.Published)
                                }
                                @Html.ValidationMessageFor(model => model.Published)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Locales[item].Name)
                            </div>
                            <div class="col-md-9">
                                @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                                {
                                    @Html.NopEditorFor(model => model.Locales[item].Name)

                                }
                                else
                                {
                                    @Html.NopDisplayFor(model => model.Locales[item].Name)
                                    @Html.HiddenFor(model => model.Name)
                                }
                                @Html.ValidationMessageFor(model => model.Locales[item].Name)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Locales[item].ShortDescription)
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Locales[item].ShortDescription, "RichEditor")
                                @Html.ValidationMessageFor(model => model.Locales[item].ShortDescription)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Locales[item].FullDescription)
                            </div>
                            <div class="col-md-9">
                                <!-- #region NU-9 -->
                                @if (!Model.IsMaster && Model.VendorId > 0)
                                {
                                    <iframe frameborder="0" allowtransparency="true" style="width: 100%; height: 200px; display: block; background-color: #eee; border: 1px solid #ccc;">@(Model.FullDescription)</iframe>
                                        @Html.HiddenFor(model => model.Locales[item].FullDescription)
                                }
                                else
                                {
                                    @Html.EditorFor(model => model.Locales[item].FullDescription, "RichEditor")
                                }
                                <!-- #endregion -->
                                @Html.ValidationMessageFor(model => model.Locales[item].FullDescription)
                            </div>
                        </div>
                        @Html.HiddenFor(model => model.Locales[item].LanguageId)
                    </div>
                    ,@<div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.Published)
                                </div>
                                <div class="col-md-9">
                                    @if (Model.IsLoggedAs == "ADMIN")
                                    {
                                        @Html.NopEditorFor(model => model.Published)
                                    }
                                    else if (Model.IsLoggedAs == "STORE.ADMIN" && Model.VendorId != 0)
                                    {
                                        @Html.NopDisplayFor(model => model.Published)
                                    }
                                    else if (Model.IsLoggedAs == "STORE.ADMIN" && Model.VendorId == 0)
                                    {
                                        @Html.NopEditorFor(model => model.Published)
                                    }
                                    @Html.ValidationMessageFor(model => model.Published)
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.Name)
                                </div>
                                <div class="col-md-9">
                                    @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                                    {
                                        @Html.NopEditorFor(model => model.Name)
                                    }
                                    else
                                    {
                                        @Html.NopDisplayFor(model => model.Name)
                                    }
                                    @Html.ValidationMessageFor(model => model.Name)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.ShortDescription)
                                </div>
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ShortDescription, "RichEditor")
                                    @Html.ValidationMessageFor(model => model.ShortDescription)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.FullDescription)
                                </div>
                                <div class="col-md-9">
                                    <!-- #region NU-9 -->
                                    @if (!Model.IsMaster && Model.VendorId > 0)
                                    {
                                        <iframe frameborder="0" allowtransparency="true" style="width: 100%; height: 200px; display: block; background-color: #eee; border: 1px solid #ccc;">@(Model.FullDescription)</iframe>
                                        @Html.HiddenFor(x => x.FullDescription)
                                    }
                                    else
                                    {
                                        @Html.EditorFor(model => model.FullDescription, "RichEditor")
                                    }
                                    <!-- #endregion -->
                                    @Html.ValidationMessageFor(model => model.FullDescription)
                                </div>
                            </div>
                            <!-- #region NU-19 -->
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.CheckoutNotes)
                                </div>
                                <div class="col-md-9">
                                    @Html.NopTextAreaFor(x => x.CheckoutNotes)
                                </div>
                            </div>
                            <!-- #endregion -->
                        </div>
        ))
                    <div>
                        @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.NopLabelFor(model => model.Sku)
                                </div>
                                <div class="col-md-9">
                                    @Html.NopEditorFor(model => model.Sku)
                                    @Html.ValidationMessageFor(model => model.Sku)
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(model => model.Sku)
                        }
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.AlternateProductName)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.AlternateProductName)
                                @Html.ValidationMessageFor(model => model.AlternateProductName)
                            </div>
                        </div>
                    </div>
                    <!-- #region NU-18 -->
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                <label class="control-label" for="ProductionLead" title="">Production Lead Time</label>
                                <div class="ico-help" title=""><i class="fa fa-question-circle"></i></div>
                            </div>
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.ProductionDaysLead, dayDropDown, new { style = "width:65px;display: inline-block" }) @{<text>&nbsp;days&nbsp;</text>}
                            @Html.NopDropDownListFor(model => model.ProductionHoursLead, hoursDropDown, new { style = "width:65px;display: inline-block" }) @{<text>&nbsp;hours&nbsp;</text>}
                            @Html.NopDropDownListFor(model => model.ProductionMinutesLead, minutesDropDown, new { style = "width:65px;display: inline-block" }) @{<text>&nbsp;minutes</text>}
                        </div>
                    </div>
                    <!-- #endregion -->
                    <div class="form-group @(Model.ProductEditorSettingsModel.ProductTags ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ProductTags)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ProductTags)
                            @Html.ValidationMessageFor(model => model.ProductTags)
                        </div>
                    </div>
                    @* @(Model.ProductEditorSettingsModel.GTIN ? null : "advanced-setting")*@
                    <div class="form-group ">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Gtin)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Gtin)
                            @Html.ValidationMessageFor(model => model.Gtin)
                        </div>
                    </div>

                    <div class="form-group @(Model.ProductEditorSettingsModel.ShowOnHomePage ? null : "advanced-setting")" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ShowOnHomePage)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ShowOnHomePage)
                            @Html.ValidationMessageFor(model => model.ShowOnHomePage)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisplayOrder ? null : "advanced-setting")" id="pnlDisplayOrder" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DisplayOrder)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DisplayOrder)
                            @Html.ValidationMessageFor(model => model.DisplayOrder)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AllowCustomerReviews ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AllowCustomerReviews)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AllowCustomerReviews)
                            @Html.ValidationMessageFor(model => model.AllowCustomerReviews)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AvailableStartDate ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AvailableStartDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AvailableStartDateTimeUtc) &nbsp;@Model.PrimaryTimeZone
                            @Html.ValidationMessageFor(model => model.AvailableStartDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AvailableEndDate ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AvailableEndDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AvailableEndDateTimeUtc) &nbsp;@Model.PrimaryTimeZone
                            @Html.ValidationMessageFor(model => model.AvailableEndDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MarkAsNew ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MarkAsNew)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MarkAsNew)
                            @Html.ValidationMessageFor(model => model.MarkAsNew)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MarkAsNewStartDate ? null : "advanced-setting")" id="pnlMarkAsNewStartDateTimeUtc">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MarkAsNewStartDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MarkAsNewStartDateTimeUtc)
                            @Html.ValidationMessageFor(model => model.MarkAsNewStartDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MarkAsNewEndDate ? null : "advanced-setting")" id="pnlMarkAsNewEndDateTimeUtc">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MarkAsNewEndDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MarkAsNewEndDateTimeUtc)
                            @Html.ValidationMessageFor(model => model.MarkAsNewEndDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AdminComment ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AdminComment)
                        </div>
                        <div class="col-md-9">
                            @Html.NopTextAreaFor(model => model.AdminComment)
                            @Html.ValidationMessageFor(model => model.AdminComment)
                        </div>
                    </div>
                    @if (Model.CreatedOn.HasValue)
                    {
                        <div class="form-group @(Model.ProductEditorSettingsModel.CreatedOn ? null : "advanced-setting")">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.CreatedOn)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDisplay(Model.CreatedOn.Value.ToString("F"))
                            </div>
                        </div>
                    }
                    @if (Model.UpdatedOn.HasValue)
                    {
                        <div class="form-group @(Model.ProductEditorSettingsModel.UpdatedOn ? null : "advanced-setting")">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.UpdatedOn)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDisplay(Model.UpdatedOn.Value.ToString("F"))
                            </div>
                        </div>
                    }
                    @if (!String.IsNullOrEmpty(Model.UpdatedBy))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.UpdatedBy)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDisplay(Model.UpdatedBy)
                            </div>
                        </div>
                    }
                </div>
            </div>
            @*@(Model.ProductEditorSettingsModel.IsGiftCard ? null : "advanced-setting")*@
            <div class="panel panel-default" id="group-giftcard">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.GiftCard")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsGiftCard)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {

                                @Html.NopEditorFor(model => model.IsGiftCard)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsGiftCard)
                            }
                            @Html.ValidationMessageFor(model => model.IsGiftCard)
                        </div>
                    </div>
                    <div class="form-group" id="pnlGiftCardType">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.GiftCardTypeId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.GiftCardTypeId, ((GiftCardType)Model.GiftCardTypeId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.GiftCardTypeId)
                        </div>
                    </div>
                    <div class="form-group" id="pnlOverriddenGiftCardAmount">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OverriddenGiftCardAmount)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.OverriddenGiftCardAmount)
                            @Html.ValidationMessageFor(model => model.OverriddenGiftCardAmount)
                        </div>
                    </div>
                </div>
            </div>
            <!-- #region NU-16 -->
            @* (Model.ProductEditorSettingsModel.IsMealPlan?null:"advanced-setting" )"*@
            <div class="panel panel-default @(Model.IsLoggedAs != " VENDOR")" id="group-mealplan">
                <div class="panel-heading">
                    Mealplan
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsMealPlan)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin() && (Model.IsLoggedAs == "ADMIN" && Model.IsMaster))
                            {

                                @Html.NopEditorFor(model => model.IsMealPlan)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsMealPlan)
                            }
                            @Html.ValidationMessageFor(model => model.IsMealPlan)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ShowStandardMealPlanFields)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin() && (Model.IsLoggedAs == "ADMIN" && Model.IsMaster))
                            {

                                @Html.NopEditorFor(model => model.ShowStandardMealPlanFields)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.ShowStandardMealPlanFields)
                            }
                            @Html.ValidationMessageFor(model => model.ShowStandardMealPlanFields)
                        </div>
                    </div>
                </div>
            </div>
            <!-- #endregion -->
            <!----Reservation New-->

            <div class="panel panel-default" id="group-reservation">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.IsReservation")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                @Html.Label("Is Reservation")
                            </div>
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsReservation)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsReservation)
                            }
                            @Html.ValidationMessageFor(model => model.IsReservation)
                    </div>
                </div>
                    <div class="form-group" id="pnlReservation">
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Lead Time (Days)", new { @class = "control-label" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                @Html.NopEditorFor(model => model.LeadTime)
                                @Html.ValidationMessageFor(model => model.LeadTime)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Reservation Open Window (Days)", new { @class = "control-label" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                @Html.NopEditorFor(model => model.MaxWindowDays)
                                @Html.ValidationMessageFor(model => model.MaxWindowDays)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                ** Changes to Lead Time / Reservation Open Window will be effective post product save.
                            </div>
                        </div>

                        @if (Model != null && Model.Id > 0)
                        {
                            @Html.Partial("_ProductFulfillmentCalendar", new ViewDataDictionary { { "id", Model.Id } })
                        }
                        else
                        {
                            <div class="form-group">
                                <div class="col-md-12">
                                    ** Save product first to enable/disable available slots.
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Max. Occupancy")
                                </div>
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.MaxOccupancy)
                                @Html.ValidationMessageFor(model => model.MaxOccupancy)
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Start time")
                                </div>
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationStartHour, new SelectList(Model.ReservationStartHour, "Value", "Text", Model.ReservationSelectedStartHour), htmlAttributes: new { @class = "form-control", id = "ReservationStartHour" })
                                @*@Html.ValidationMessageFor(model => Model.ReservationStartHour)*@
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationStartMinute, new SelectList(Model.ReservationStartMinute, "Value", "Text", Model.ReservationSelectedStartMinute), htmlAttributes: new { @class = "form-control", id = "ReservationStartMinute" })
                                @*@Html.ValidationMessageFor(model => model.ReservationStartMinute)*@
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationStartAMPM, new SelectList(Model.ReservationStartAMPM, "Value", "Text", Model.ReservationSelectedStartAMPM), htmlAttributes: new { @class = "form-control", id = "ReservationStartAMPM" })
                                @*@Html.ValidationMessageFor(model => model.ReservationStartAMPM)*@
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("End time")
                                </div>
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationEndHour, new SelectList(Model.ReservationEndHour, "Value", "Text", Model.ReservationSelectedEndHour), htmlAttributes: new { @class = "form-control", id = "ReservationEndHour" })
                                @*@Html.ValidationMessageFor(model => model.ReservationEndHour)*@
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationEndMinute, new SelectList(Model.ReservationEndMinute, "Value", "Text", Model.ReservationSelectedEndMinute), htmlAttributes: new { @class = "form-control", id = "ReservationEndMinute" })
                                @*@Html.ValidationMessageFor(model => model.ReservationEndMinute)*@
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => Model.ReservationEndAMPM, new SelectList(Model.ReservationEndAMPM, "Value", "Text", Model.ReservationSelectedEndAMPM), htmlAttributes: new { @class = "form-control", id = "ReservationEndAMPM" })
                                @*@Html.ValidationMessageFor(model => model.ReservationEndAMPM)*@
                            </div>

                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Interval")
                                </div>
                            </div>
                            <div class="col-md-9">
                                <input id="rd15min" type="radio" name="rdInterval"  value="15min" @(Model.ReservationInterval == 15 ? " checked=\"checked\"" : null) />
                                <label>15 mins</label>
                            </div>
                            <div class="col-md-9">
                                <input id="rd30min" type="radio" name="rdInterval"  value="30min" @(Model.ReservationInterval == 30 ? " checked=\"checked\"" : null) />
                                <label>30 mins</label>
                            </div>
                            <div class="col-md-3">
                                &nbsp;
                            </div>
                            <div class="col-md-9">
                                <input id="rd60min" type="radio" name="rdInterval"  value="60min" @(Model.ReservationInterval == 60 ? " checked=\" checked\"" : null) />
                                <label>1 hr</label>
                            </div>
                            <div class="col-md-3">
                                &nbsp;
                            </div>
                            <div class="col-md-9">
                                <input id="rd1min" type="radio" name="rdInterval"  value="1min" @(Model.ReservationInterval == 1 ? " checked=\" checked\"" : null) />
                                <label>Custom</label>
                            </div>
                        </div>
                        <div class="form-group" id="customReservationInterval">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Reservation Interval(minutes)")
                                </div>
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.ReservationTimeInterval)
                                @Html.ValidationMessageFor(model => model.ReservationTimeInterval)
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    @Html.Label("Reservation Ticket cap per slot")
                                </div>
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.ReservationCapPerSlot)
                                @Html.ValidationMessageFor(model => model.ReservationCapPerSlot)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--Reservation New End-->

            @* @(Model.ProductEditorSettingsModel.IsDonation ? null : "advanced-setting")*@
            <div class="panel panel-default" id="group-donation">
                <div class="panel-heading">
                    @T("Admin.Donations")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsDonation)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {

                                @Html.NopEditorFor(model => model.IsDonation)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsDonation)
                            }
                            @Html.ValidationMessageFor(model => model.IsDonation)
                        </div>
                    </div>
                    <div class="form-group" id="pnlDonationCorporateNotification">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsCorporateDonation)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.IsCorporateDonation)
                            @Html.ValidationMessageFor(model => model.IsCorporateDonation)
                        </div>
                    </div>
                </div>
            </div>
            <!-- #endregion -->
            @*  @(Model.ProductEditorSettingsModel.DownloadableProduct ? null : "advanced-setting")"*@
            <div class="panel panel-default" id="group-downloads">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.DownloadableProduct")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsDownload)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {

                                @Html.NopEditorFor(model => model.IsDownload)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsDownload)
                            }
                            @Html.ValidationMessageFor(model => model.IsDownload)
                        </div>
                    </div>
                    <div class="form-group" id="pnlDownloadFile">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DownloadId)
                        </div>
                        <div class="col-md-5">
                            @Html.NopEditorFor(model => model.DownloadId)
                            @Html.ValidationMessageFor(model => model.DownloadId)
                        </div>
                    </div>
                    <div class="form-group" id="pnlUnlimitedDownloads">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.UnlimitedDownloads)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.UnlimitedDownloads)
                            @Html.ValidationMessageFor(model => model.UnlimitedDownloads)
                        </div>
                    </div>
                    <div class="form-group" id="pnlMaxNumberOfDownloads">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MaxNumberOfDownloads)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MaxNumberOfDownloads)
                            @Html.ValidationMessageFor(model => model.MaxNumberOfDownloads)
                        </div>
                    </div>
                    <div class="form-group" id="pnlDownloadExpirationDays">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DownloadExpirationDays)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DownloadExpirationDays)
                            @Html.ValidationMessageFor(model => model.DownloadExpirationDays)
                        </div>
                    </div>
                    <div class="form-group" id="pnlDownloadActivationType">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DownloadActivationTypeId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.DownloadActivationTypeId, ((DownloadActivationType)Model.DownloadActivationTypeId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.DownloadActivationTypeId)
                        </div>
                    </div>
                    <div class="form-group" id="pnlHasUserAgreement">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.HasUserAgreement)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.HasUserAgreement)
                            @Html.ValidationMessageFor(model => model.HasUserAgreement)
                        </div>
                    </div>
                    <div class="form-group" id="pnlUserAgreementText">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.UserAgreementText)
                        </div>
                        <div class="col-md-9">
                            @Html.NopTextAreaFor(model => model.UserAgreementText)
                            @Html.ValidationMessageFor(model => model.UserAgreementText)
                        </div>
                    </div>
                    <div class="form-group" id="pnlHasSampleDownload">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.HasSampleDownload)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.HasSampleDownload)
                            @Html.ValidationMessageFor(model => model.HasSampleDownload)
                        </div>
                    </div>
                    <div class="form-group" id="pnlSampleDownloadFile">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SampleDownloadId)
                        </div>
                        <div class="col-md-5">
                            @Html.NopEditorFor(model => model.SampleDownloadId)
                            @Html.ValidationMessageFor(model => model.SampleDownloadId)
                        </div>
                    </div>
                </div>
            </div>

          

            @* @(Model.ProductEditorSettingsModel.IsRental ? null : "advanced-setting")*@
            <div class="panel panel-default" id="group-rental">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.Rental")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsRental)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsRental)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsRental)
                            }
                            @Html.ValidationMessageFor(model => model.IsRental)
                        </div>
                    </div>
                    <div class="form-group" id="pnlRentalPriceLength">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.RentalPriceLength)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.RentalPriceLength)
                            @Html.ValidationMessageFor(model => model.RentalPriceLength)
                        </div>
                    </div>
                    <div class="form-group" id="pnlRentalPricePeriod">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.RentalPricePeriodId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.RentalPricePeriodId, ((RentalPricePeriod)Model.RentalPricePeriodId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.RentalPricePeriodId)
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default" id="group-prices">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.Prices")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Price)
                        </div>
                        <div class="col-md-9">

                            @Html.NopEditorFor(model => model.Price) [@Model.PrimaryStoreCurrencyCode]

                            @Html.ValidationMessageFor(model => model.Price)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.OldPrice ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OldPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.OldPrice) [@Model.PrimaryStoreCurrencyCode]
                            @Html.ValidationMessageFor(model => model.OldPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.ProductCost ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ProductCost)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ProductCost) [@Model.PrimaryStoreCurrencyCode]
                            @Html.ValidationMessageFor(model => model.ProductCost)
                        </div>
                    </div>
                    <div id="specialPricediv" class="form-group @(Model.ProductEditorSettingsModel.SpecialPrice ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SpecialPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.SpecialPrice) [@Model.PrimaryStoreCurrencyCode]
                            @Html.ValidationMessageFor(model => model.SpecialPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.SpecialPriceStartDate ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SpecialPriceStartDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.SpecialPriceStartDateTimeUtc) &nbsp;&nbsp;@Model.PrimaryTimeZone
                            @Html.ValidationMessageFor(model => model.SpecialPriceStartDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.SpecialPriceEndDate ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SpecialPriceEndDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.SpecialPriceEndDateTimeUtc) &nbsp;&nbsp;@Model.PrimaryTimeZone
                            @Html.ValidationMessageFor(model => model.SpecialPriceEndDateTimeUtc)
                        </div>
                    </div>
                    <!-- #region NU-15 -->
                    @if (Model.IsMaster && Model.VendorId > 0)
                    {
                        <div class="form-group @(Model.ProductEditorSettingsModel.StoreCommission ? null : "advanced-setting")">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.StoreCommission)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.StoreCommission) [%]
                                @Html.ValidationMessageFor(model => model.StoreCommission)
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.StoreCommission)
                    }
                    <!-- #endregion -->
                    <div class="form-group @(Model.ProductEditorSettingsModel.IsBundleProduct ? null : "advanced-setting")" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsBundleProduct)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.IsBundleProduct)
                            @Html.ValidationMessageFor(model => model.IsBundleProduct)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisableBuyButton ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DisableBuyButton)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DisableBuyButton)
                            @Html.ValidationMessageFor(model => model.DisableBuyButton)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisableBuyButton ? null : " advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DisableBuyButtonForGuestUsers)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DisableBuyButtonForGuestUsers)
                            @Html.ValidationMessageFor(model => model.DisableBuyButtonForGuestUsers)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisableWishlistButton ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DisableWishlistButton)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DisableWishlistButton)
                            @Html.ValidationMessageFor(model => model.DisableWishlistButton)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AvailableForPreOrder ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AvailableForPreOrder)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AvailableForPreOrder)
                            @Html.ValidationMessageFor(model => model.AvailableForPreOrder)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AvailableForPreOrder ? null : "advanced-setting")" id="pnlPreOrderAvailabilityStartDateTimeUtc">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
                            @Html.ValidationMessageFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.CallForPrice ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CallForPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CallForPrice)
                            @Html.ValidationMessageFor(model => model.CallForPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.CustomerEntersPrice ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CustomerEntersPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CustomerEntersPrice)
                            @Html.ValidationMessageFor(model => model.CustomerEntersPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.CustomerEntersPrice ? null : "advanced-setting")" id="pnlMinimumCustomerEnteredPrice">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MinimumCustomerEnteredPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MinimumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                            @Html.ValidationMessageFor(model => model.MinimumCustomerEnteredPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.CustomerEntersPrice ? null : "advanced-setting")" id="pnlMaximumCustomerEnteredPrice">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MaximumCustomerEnteredPrice)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MaximumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                            @Html.ValidationMessageFor(model => model.MaximumCustomerEnteredPrice)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.PAngV ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BasepriceEnabled)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.BasepriceEnabled)
                            @Html.ValidationMessageFor(model => model.BasepriceEnabled)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.PAngV ? null : "advanced-setting")" id="pnlBasepriceAmount">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BasepriceAmount)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.BasepriceAmount)
                            @Html.ValidationMessageFor(model => model.BasepriceAmount)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.PAngV ? null : "advanced-setting")" id="pnlBasepriceUnit">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BasepriceUnitId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.BasepriceUnitId, Model.AvailableBasepriceUnits)
                            @Html.ValidationMessageFor(model => model.BasepriceUnitId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.PAngV ? null : "advanced-setting")" id="pnlBasepriceBaseAmount">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BasepriceBaseAmount)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.BasepriceBaseAmount)
                            @Html.ValidationMessageFor(model => model.BasepriceBaseAmount)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.PAngV ? null : "advanced-setting")" id="pnlBasepriceBaseUnit">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.BasepriceBaseUnitId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.BasepriceBaseUnitId, Model.AvailableBasepriceBaseUnits)
                            @Html.ValidationMessageFor(model => model.BasepriceBaseUnitId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.Discounts ? null : "advanced-setting")">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SelectedDiscountIds)
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.SelectedDiscountIds, new { SelectList = Model.AvailableDiscounts })
                            <script>
                                $(document).ready(function() {
                                    var discountsIdsInput = $('#@Html.FieldIdFor(model => model.SelectedDiscountIds)').data("kendoMultiSelect");
                                    discountsIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableDiscounts.Count == 0)
                            {
                                <text>
                                    discountsIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Catalog.Products.Fields.Discounts.NoDiscounts")'
                                    });
                                    discountsIdsInput._placeholder();
                                    discountsIdsInput._enable();
                                    </text>
                            }
                                });
                            </script>
                        </div>
                    </div>
                    <div class="form-group" id="maxDisocuntQty">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.MaxDiscountQuantity)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.MaxDiscountQuantity)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsTaxExempt)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {

                                @Html.NopEditorFor(model => model.IsTaxExempt)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsTaxExempt)
                            }
                            @Html.ValidationMessageFor(model => model.IsTaxExempt)
                        </div>
                    </div>
                    <div class="form-group" id="pnlTaxCategory">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.TaxCategoryId)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {

                                @Html.NopDropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories)
                            }
                            else
                            {
                                @Html.NopDropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories)
                            }
                            @Html.ValidationMessageFor(model => model.TaxCategoryId)
                        </div>
                    </div>

                    <div class="form-group @(Model.ProductEditorSettingsModel.TelecommunicationsBroadcastingElectronicServices ? null : "advanced-setting")" id="pnlIsTelecommunicationsOrBroadcastingOrElectronicServices">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
                            @Html.ValidationMessageFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default @(Model.ProductEditorSettingsModel.TierPrices ? null : "advanced-setting")" id="tier-prices">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.TierPrices")
                </div>
                <div class="panel-body">
                    <p>
                        @T("Admin.Catalog.Products.TierPrices.Hint")
                    </p>
                    @if (Model.Id > 0)
                    {
                        <div id="tierprices-grid"></div>

                        <script>
                            $(document).ready(function() {
                                $("#tierprices-grid").kendoGrid({
                                    dataSource:
                                    {
                                        type: "json",
                                        transport:
                                        {
                                            read:
                                            {
                                                url: "@Html.Raw(Url.Action("TierPriceList", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            create:
                                            {
                                                url: "@Html.Raw(Url.Action("TierPriceInsert", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update:
                                            {
                                                url: "@Html.Raw(Url.Action("TierPriceUpdate", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy:
                                            {
                                                url: "@Html.Raw(Url.Action("TierPriceDelete", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema:
                                        {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model:
                                            {
                                                id: "Id",
                                                fields:
                                                {
                                                    Store: { editable: true, type: "string" },
                                                    StoreId: { editable: true, type: "number" },
                                                    CustomerRole: { editable: true, type: "string" },
                                                    CustomerRoleId: { editable: true, type: "number" },
                                                    //ProductId: { editable: false, type: "number" },
                                                    Quantity: { editable: true, type: "number" },
                                                    Price: { editable: true, type: "number" },
                                                    Id: { editable: false, type: "number" }
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "create" || e.type == "update")
                                            {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable:
                                    {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                                    editable:
                                    {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [
                                    {
                                        field: "StoreId",
                                        title: "@T("Admin.Catalog.Products.TierPrices.Fields.Store")",
                                        width: 250,
                                        editor: storeDropDownEditor,
                                        template: "#:Store#"
                                    },
                                    {
                                        field: "CustomerRoleId",
                                        title: "@T("Admin.Catalog.Products.TierPrices.Fields.CustomerRole")",
                                        width: 250,
                                        editor: customerRoleDropDownEditor,
                                        template: "#:CustomerRole#"
                                    },
                                    {
                                        field: "Quantity",
                                        title: "@T("Admin.Catalog.Products.TierPrices.Fields.Quantity")",
                                        width: 150,
                                        //integer format
                                        format: "{0:0}"
                                    }, {
                                        field: "Price",
                                        title: "@T("Admin.Catalog.Products.TierPrices.Fields.Price")",
                                        width: 150,
                                        editor: function(container, options) {
                                            $('<input name="' + options.field + '" />')
                                            .appendTo(container)
                                            .kendoNumericTextBox({
                                                format: "{0:n4}",
                                                decimals: 4
                                            });
                                        }
                                    }, {
                                        command: [
                                        {
                                            name: "edit",
                                            text:
                                            {
                                                edit: "@T("Admin.Common.Edit")",
                                                update: "@T("Admin.Common.Update")",
                                                cancel: "@T("Admin.Common.Cancel")"
                                            }
                                        }, {
                                            name: "destroy",
                                            text: "@T("Admin.Common.Delete")"
                                        }
                                        ],
                                        width: 200
                                    }
                                    ]
                                });
                            });

                            //local datasource
                            var allStores = [
                            {
                                Id: 0,
                                Name: "@T("Admin.Configuration.Settings.AllSettings.Fields.StoreName.AllStores")"
                            }
                            @{
                                var storeService = EngineContext.Current.Resolve<IStoreService>();
                                var allStores = storeService.GetAllStores();
                            }
                            @foreach (var store in allStores)
                            {
                                <text>
                                , {
                                    Id: @(store.Id),
                                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(store.Name)))"
                                }
                                </text>
                            }
                            ];

                            var allCustomerRoles = [
                            {
                                Id: 0,
                                Name: "@T("Admin.Catalog.Products.TierPrices.Fields.CustomerRole.All")"
                            }
                            @{
                                var customerService = EngineContext.Current.Resolve<ICustomerService>();
                                var allCustomerRoles = customerService.GetAllCustomerRoles(true);
                            }
                            @foreach (var customerRole in allCustomerRoles)
                            {
                                <text>
                                , {
                                    Id: @(customerRole.Id),
                                    Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(customerRole.Name)))"
                                }
                                </text>
                            }
                            ];

                            function storeDropDownEditor(container, options) {
                                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:StoreId" />')
                                .appendTo(container)
                                .kendoDropDownList({
                                    autoBind: false,
                                    dataSource: allStores
                                });
                            }

                            function customerRoleDropDownEditor(container, options)
                            {
                                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:CustomerRoleId" />')
                                .appendTo(container)
                                .kendoDropDownList({
                                    autoBind: false,
                                    dataSource: allCustomerRoles
                                });
                            }
                        </script>
    }
    else
    {
        @T("Admin.Catalog.Products.TierPrices.SaveBeforeEdit")
    }
                </div>
            </div>
        </div>
    </div>
    <div class="@(Model.ProductEditorSettingsModel.OneColumnProductPage ? " col-md-12":
     "col-md-5" )">
       <div class="panel-group">
            @{
                var leftColumnClass = Model.ProductEditorSettingsModel.OneColumnProductPage ? "col-md-3" : "col-md-4";
                var rightColumnClass = Model.ProductEditorSettingsModel.OneColumnProductPage ? "col-md-9" : "col-md-8";
            }
            <div class="panel panel-default margin-bottom" id="group-associated-products">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.AssociatedProducts")
                </div>
                @if (Model.Id > 0)
            {
                    <div class="panel-body">
                        <ul class="common-list">
                            <li>
                                @T("Admin.Catalog.Products.AssociatedProducts.Note1")
                            </li>
                            <li>
                                @T("Admin.Catalog.Products.AssociatedProducts.Note2")
                            </li>
                        </ul>

                        <div id="associatedproducts-grid">
                        </div>

                        <script>
                            $(document).ready(function()
                            {
                                $("#associatedproducts-grid").kendoGrid({
                                    dataSource:
                                    {
                                        type: "json",
                                        transport:
                                        {
                                            read:
                                            {
                                                url: "@Html.Raw(Url.Action("AssociatedProductList", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update:
                                            {
                                                url: "@Html.Raw(Url.Action("AssociatedProductUpdate", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy:
                                            {
                                                url: "@Html.Raw(Url.Action("AssociatedProductDelete", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema:
                                        {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model:
                                            {
                                                id: "Id",
                                                fields:
                                                {
                                                    ProductName: { editable: false, type: "string" },
                                                    DisplayOrder: { editable: true, type: "number" },
                                                    Id: { editable: false, type: "number" }
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update")
                                            {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable:
                                    {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    editable:
                                    {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [
                                    {
                                        field: "ProductName",
                                        title: "@T("Admin.Catalog.Products.AssociatedProducts.Fields.Product")",
                                        template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=Id#">#=ProductName#</a>',
                                        width: 250
                                    }, {
                                        field: "DisplayOrder",
                                        title: "@T("Admin.Catalog.Products.AssociatedProducts.Fields.DisplayOrder")",
                                        //integer format
                                        format: "{0:0}",
                                        width: 120
                                    }, {
                                        command: [
                                        {
                                            name: "edit",
                                            text:
                                            {
                                                edit: "@T("Admin.Common.Edit")",
                                                update: "@T("Admin.Common.Update")",
                                                cancel: "@T("Admin.Common.Cancel")"
                                            }
                                        }, {
                                            name: "destroy",
                                            text: "@T("Admin.Common.Delete")"
                                        }
                                        ],
                                        width: 220
                                    }
                                    ]
                                });
                            });
                        </script>
                    </div>
                    <div class="panel-footer">
                        <button type="submit" id="btnAddNewAssociatedProduct" onclick="javascript:OpenWindow('@(Url.Action("AssociatedProductAddPopup", "Product", new {productId = Model.Id, btnId = "btnRefreshAssociatedProducts", formId = "product-form"}))', 800, 800, true); return false;" class="btn btn-primary">
                            @T("Admin.Catalog.Products.AssociatedProducts.AddNew")
                        </button>
                        <input type="submit" id="btnRefreshAssociatedProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function()
                            {
                                $('#btnRefreshAssociatedProducts').click(function() {
                                    //refresh grid
                                    var grid = $("#associatedproducts-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </div>
                }
                else
                {
                    <div class="panel-body">
                        @T("Admin.Catalog.Products.AssociatedProducts.SaveBeforeEdit")
                    </div>
                }
            </div>
            <div class="panel panel-default no-margin" id="group-inventory">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.Inventory")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.ManageInventoryMethodId)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopDropDownListFor(model => model.ManageInventoryMethodId, ((ManageInventoryMethod)Model.ManageInventoryMethodId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.ManageInventoryMethodId)
                        </div>
                    </div>
                    <div class="form-group" id="pnlStockQuantity">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.StockQuantity)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.StockQuantity)
                            @Html.HiddenFor(model => model.LastStockQuantity)
                            @Html.ValidationMessageFor(model => model.StockQuantity)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.Warehouse ? null : "advanced-setting")" id="pnlWarehouse">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.WarehouseId)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopDropDownListFor(model => model.WarehouseId, Model.AvailableWarehouses)
                            @Html.ValidationMessageFor(model => model.WarehouseId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.UseMultipleWarehouses ? null : "advanced-setting")" id="pnlUseMultipleWarehouses">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.UseMultipleWarehouses)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.UseMultipleWarehouses)
                            @Html.ValidationMessageFor(model => model.UseMultipleWarehouses)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.UseMultipleWarehouses ? null : "advanced-setting")" id="pnlMultipleWarehouses">
                        <div class="col-md-12" style="overflow-x: auto;">
                            @if (Model.ProductWarehouseInventoryModels.Count > 0)
                            {
                                <table class="table table-hover table-bordered text-center">
                                    <thead>
                                        <tr>
                                            <th>
                                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.Warehouse")
                                            </th>
                                            <th>
                                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.WarehouseUsed")
                                            </th>
                                            <th>
                                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.StockQuantity")
                                            </th>
                                            <th>
                                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.ReservedQuantity")
                                            </th>
                                            <th>
                                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.PlannedQuantity")
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.ProductWarehouseInventoryModels)
                                        {
                                            <tr>
                                                <td style="width: 36%;">
                                                    <div style="padding-left: 10px; padding-right: 10px;">
                                                        @item.WarehouseName
                                                    </div>
                                                </td>
                                                <td style="width: 10%;">
                                                    <input type="checkbox" id="warehouse_used_@(item.WarehouseId)" name="warehouse_used_@(item.WarehouseId)" value="@item.WarehouseId" checked="@item.WarehouseUsed" />
                                                    <script type="text/javascript">
                                                        $(document).ready(function() {
                                                            $("#warehouse_used_@(item.WarehouseId)").change(toggleWarehouseUsed_@(item.WarehouseId));
                                                            toggleWarehouseUsed_@(item.WarehouseId)();
                                                        });

                                                        function toggleWarehouseUsed_@(item.WarehouseId)() {
                                                            if ($('#warehouse_used_@(item.WarehouseId)').is(':checked')) {
                                                                $('#warehouse_qty_@(item.WarehouseId)').prop('disabled', false);
                                                                $('#warehouse_reserved_@(item.WarehouseId)').prop('disabled', false);
                                                            } else {
                                                                $('#warehouse_qty_@(item.WarehouseId)').prop('disabled', true);
                                                                $('#warehouse_reserved_@(item.WarehouseId)').prop('disabled', true);
                                                            }
                                                        }
                                                    </script>
                                                <td style="width: 18%;">
                                                    <input id="warehouse_qty_@(item.WarehouseId)" name="warehouse_qty_@(item.WarehouseId)" type="text" value="@item.StockQuantity" class="form-control" />
                                                </td>
                                                <td style="width: 18%;">
                                                    <input id="warehouse_reserved_@(item.WarehouseId)" name="warehouse_reserved_@(item.WarehouseId)" type="text" value="@item.ReservedQuantity" class="form-control" />
                                                </td>
                                                <td style="width: 18%;">
                                                    @item.PlannedQuantity
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <p>
                                    <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description1")</em>
                                </p>
                                <p>
                                    <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description2")</em>
                                </p>
                                <p>
                                    <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description3")</em>
                                </p>
                            }
                            else
                            {
                                @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.Warehouse.NotDefined")
                            }
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisplayStockAvailability ? null : "advanced-setting")" id="pnlDisplayStockAvailability">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.DisplayStockAvailability)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.DisplayStockAvailability)
                            @Html.ValidationMessageFor(model => model.DisplayStockAvailability)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.DisplayStockQuantity ? null : "advanced-setting")" id="pnlDisplayStockQuantity">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.DisplayStockQuantity)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.DisplayStockQuantity)
                            @Html.ValidationMessageFor(model => model.DisplayStockQuantity)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MinimumStockQuantity ? null : "advanced-setting")" id="pnlMinStockQuantity">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.MinStockQuantity)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.MinStockQuantity)
                            @Html.ValidationMessageFor(model => model.MinStockQuantity)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.LowStockActivity ? null : "advanced-setting")" id="pnlLowStockActivity">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.LowStockActivityId)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopDropDownListFor(model => model.LowStockActivityId, ((LowStockActivity)Model.LowStockActivityId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.LowStockActivityId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.NotifyAdminForQuantityBelow ? null : "advanced-setting")" id="pnlNotifyForQuantityBelow">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.NotifyAdminForQuantityBelow)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.NotifyAdminForQuantityBelow)
                            @Html.ValidationMessageFor(model => model.NotifyAdminForQuantityBelow)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.Backorders ? null : "advanced-setting")" id="pnlBackorders">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.BackorderModeId)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopDropDownListFor(model => model.BackorderModeId, ((BackorderMode)Model.BackorderModeId).ToSelectList())
                            @Html.ValidationMessageFor(model => model.BackorderModeId)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AllowBackInStockSubscriptions ? null : "advanced-setting")" id="pnlAllowBackInStockSubscriptions">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.AllowBackInStockSubscriptions)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.AllowBackInStockSubscriptions)
                            @Html.ValidationMessageFor(model => model.AllowBackInStockSubscriptions)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MinimumCartQuantity ? null : "advanced-setting")">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.OrderMinimumQuantity)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.OrderMinimumQuantity)
                            @Html.ValidationMessageFor(model => model.OrderMinimumQuantity)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.MaximumCartQuantity ? null : "advanced-setting")">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.OrderMaximumQuantity)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.OrderMaximumQuantity)
                            @Html.ValidationMessageFor(model => model.OrderMaximumQuantity)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.AllowedQuantities ? null : "advanced-setting")">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.AllowedQuantities)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.AllowedQuantities)
                            @Html.ValidationMessageFor(model => model.AllowedQuantities)
                        </div>
                    </div>




                    <div class="form-group @(Model.ProductEditorSettingsModel.AllowAddingOnlyExistingAttributeCombinations ? null : "advanced-setting")" id="pnlAllowAddingOnlyExistingAttributeCombinations">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
                            @Html.ValidationMessageFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.NotReturnable ? null : "advanced-setting")">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.NotReturnable)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.NotReturnable)
                            @Html.ValidationMessageFor(model => model.NotReturnable)
                        </div>
                    </div>
                </div>
            </div>



            <div class="panel panel-default">
                <div class="panel-heading">
                    Limit Products
                </div>
                @if (Model.Id > 0 && !Model.IsMaster)	/// NU-10
            {
                    <div class="panel-body">
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.LimitPurchase)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.LimitPurchase)
                                @Html.ValidationMessageFor(model => model.LimitPurchase)
                            </div>
                        </div>
                        <div class="form-group" id="MaxQuantityDiv">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.CustomerMaximumQuantity)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.CustomerMaximumQuantity)
                                @Html.ValidationMessageFor(model => model.CustomerMaximumQuantity)
                            </div>
                        </div>

                        <div class="form-group" id="LimitPurchaseTypeDiv">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.LimitPurchaseType)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDropDownListFor(model => model.LimitPurchaseType, limitTypeDropDown, new { style = "width:200px;display: inline-block" })
                            </div>
                        </div>
                    </div>
                    <div class="panel-footer">
                    </div>
                }
            </div>
            @* @(Model.ProductEditorSettingsModel.RelatedProducts ? null : "advanced-setting")*@
            <div class="panel panel-default ">
                <div class="panel-heading">
                    Product Relation
                </div>
                @if (Model.Id > 0 && !Model.IsMaster)	/// NU-10
            {
                    <div class="panel-body">

                        <div id="relatedproducts-grid">
                        </div>

                        <script>
                            $(document).ready(function()
                            {
                                $("#relatedproducts-grid").kendoGrid({
                                    dataSource:
                                    {
                                        type: "json",
                                        transport:
                                        {
                                            read:
                                            {
                                                url: "@Html.Raw(Url.Action("ProductRelationByProductList", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },

                                        },
                                        schema:
                                        {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model:
                                            {
                                                id: "Id",
                                                fields:
                                                {
                                                    RelatedProductName: { editable: false, type: "string" },
                                                    RelationTypeName: { editable: false, type: "string" },
                                                    RelatedProductId: { editable: false, type: "int" },
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update")
                                            {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable:
                                    {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    editable:
                                    {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [
                                    {
                                        field: "RelationTypeName",
                                        title: "Relation",
                                        width: 250,
                                    }
                                    ,
                                    {
                                        field: "RelatedProductName",
                                        title: "@T("Admin.Catalog.Products.RelatedProducts.Fields.Product")",
                                        width: 250,
                                        template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=RelatedProductId#">#=RelatedProductName#</a>'
                                    },
                                    {
                                        command: [
                                        {
                                            name: "destroy",
                                            text: "@T("Admin.Common.Delete")"
                                        }
                                        ],
                                        width: 220
                                    }
                                    ]
                                });
                            });
                        </script>
                    </div>
                    @*<div class="panel-footer">
                            <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "Product", new {productId = Model.Id, btnId = "btnRefreshRelatedProducts", formId = "product-form"}))', 800, 800, true); return false;">
                                @T("Admin.Catalog.Products.RelatedProducts.AddNew")
                            </button>
                            <input type="submit" id="btnRefreshRelatedProducts" style="display: none" />
                            <script type="text/javascript">
                                $(document).ready(function() {
                                    $('#btnRefreshRelatedProducts').click(function() {
                                        //refresh grid
                                        var grid = $("#relatedproducts-grid").data('kendoGrid');
                                        grid.dataSource.read();

                                        //return false to don't reload a page
                                        return false;
                                    });
                                });
                            </script>
                        </div>*@<div class="panel-footer">
                        <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "Product" , new {productId=Model.Id, btnId="btnRefreshRelatedProducts" , formId="product-form" }))', 800, 800, true); return false;">
                            Add new Product Relation
                        </button>
                        <input type="submit" id="btnRefreshRelatedProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function() {
                                $('#btnRefreshRelatedProducts').click(function() {
                                    //refresh grid
                                    var grid = $("#relatedproducts-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </div>
                }
                else
                {
                    <div class="panel-body">
                        @T("Admin.Catalog.Products.RelatedProducts.SaveBeforeEdit")
                    </div>
                }
            </div>

            <!-- #region NU-11 -->
            @* @(Model.ProductEditorSettingsModel.DeliveryMethods ? null : "advanced-setting")*@

            <div class="panel panel-default">
                <div id="divShipping">
                    @*class="@(Model.ProductEditorSettingsModel.DeliveryMethods ? null : "advanced-setting")"*@
                    <div class="panel-heading" style="background-color: #f5f5f5;">
                        @T("Admin.Catalog.Products.DeliveryMethods")
                    </div>

                    <!-- #region NU-13 -->
                    <div style="padding:10px">

                        <div class="panel panel-default" id="group-pickup">

                            <div class="panel-heading">
                                @T("Admin.Catalog.Products.Pickup")
                            </div>
                            <div class="panel-body">
                                <div class="form-group">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.IsPickupEnabled)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @if (!Model.IsAutoFulfill || Model.IsMaster)
                                        {
                                            @Html.NopEditorFor(model => model.IsPickupEnabled)
                                            @Html.ValidationMessageFor(model => model.IsPickupEnabled)
                                        }
                                        else
                                        {
                                            @Html.NopDisplayFor(model => model.IsPickupEnabled)
                                        }
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.Warehouse ? null : "advanced-setting")" id="pnlPickupWarehouse">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.PreferredPickupWarehouseId)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.EditorFor(model => model.SelectedWarehouseIds, new { SelectList = Model.AvailablePickupWarehouses })
                                        <script>
                                            $(document).ready(function() {
                                                var warehouseIdsInput = $('#@Html.FieldIdFor(model => model.SelectedWarehouseIds)').data("kendoMultiSelect");
                                                warehouseIdsInput.setOptions({
                                                    autoClose: false
                                                });

                                                @if (Model.AvailablePickupWarehouses.Count == 0)
                                     {
                                            <text>
                                                warehouseIdsInput.setOptions({
                                                    enable: false,
                                                    placeholder: "No Pickup Warehouse available."
                                                });
                                                warehouseIdsInput._placeholder();
                                                warehouseIdsInput._enable();
                                                </text>
                                     }
                                            });
                                        </script>
                                        @*@Html.NopDropDownListFor(model => model.PreferredPickupWarehouseId, Model.AvailablePickupWarehouses)
                                            @Html.ValidationMessageFor(model => model.PreferredPickupWarehouseId)*@
                                    </div>
                                </div>

                            </div>
                        </div>
                        <!-- #endregion -->
                        <!-- #region NU-12 -->
                        <div class="panel panel-default" id="group-shipping">

                            <div class="panel-heading">
                                @T("Admin.Catalog.Products.Shipping")
                            </div>
                            <div class="panel-body">
                                <div class="form-group">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.IsShipEnabled)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @if (!Model.IsAutoFulfill || Model.IsMaster)
                                        {
                                            @Html.NopEditorFor(model => model.IsShipEnabled)
                                            @Html.ValidationMessageFor(model => model.IsShipEnabled)
                                        }
                                        else
                                        {
                                            @Html.NopDisplayFor(model => model.IsShipEnabled)
                                        }
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.Weight ? null : "advanced-setting")" id="pnlWeight">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.Weight)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.Weight) [@Model.BaseWeightIn]
                                        @Html.ValidationMessageFor(model => model.Weight)
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.Dimensions ? null : "advanced-setting")" id="pnlLength">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.Length)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.Length) [@Model.BaseDimensionIn]
                                        @Html.ValidationMessageFor(model => model.Length)
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.Dimensions ? null : "advanced-setting")" id="pnlWidth">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.Width)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.Width) [@Model.BaseDimensionIn]
                                        @Html.ValidationMessageFor(model => model.Width)
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.Dimensions ? null : "advanced-setting")" id="pnlHeight">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.Height)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.Height) [@Model.BaseDimensionIn]
                                        @Html.ValidationMessageFor(model => model.Height)
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.FreeShipping ? null : "advanced-setting")" id="pnlFreeShipping">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.IsFreeShipping)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.IsFreeShipping)
                                        @Html.ValidationMessageFor(model => model.IsFreeShipping)
                                    </div>
                                </div>
                                <div class="form-group @(Model.ProductEditorSettingsModel.ShipSeparately ? null : "advanced-setting")" id="pnlShipSeparately">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.ShipSeparately)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.ShipSeparately)
                                        @Html.ValidationMessageFor(model => model.ShipSeparately)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- #endregion -->
                        <!-- #region NU-14 -->
                        <div class="panel panel-default" id="group-shipping">

                            <div class="panel-heading">
                                @T("Admin.Catalog.Products.DeliveryDetails")
                            </div>
                            <div class="panel-body">
                                <!-----START: Codechages done by (na-sdxcorp\ADas)---------------->
                                <div class="form-group">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.IsLocalDelivery)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @if (!Model.IsAutoFulfill || Model.IsMaster)
                                        {
                                            @Html.NopEditorFor(model => model.IsLocalDelivery)
                                            @Html.ValidationMessageFor(model => model.IsLocalDelivery)
                                        }
                                        else
                                        {
                                            @Html.NopDisplayFor(model => model.IsLocalDelivery)
                                        }
                                    </div>
                                </div>
                                <!-----END: Codechages done by (na-sdxcorp\ADas)---------------->
                                @*@(Model.ProductEditorSettingsModel.AdditionalShippingCharge ? null : "advanced-setting")*@
                                <div class="form-group" id="pnlAdditionalShippingCharge">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.AdditionalShippingCharge)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopEditorFor(model => model.AdditionalShippingCharge) [@Model.PrimaryStoreCurrencyCode]
                                        @Html.ValidationMessageFor(model => model.AdditionalShippingCharge)
                                    </div>
                                </div>
                                @* @(Model.ProductEditorSettingsModel.DeliveryDate ? null : "advanced-setting")*@
                                <div class="form-group" id="pnlDeliveryDate">
                                    <div class="@leftColumnClass">
                                        @Html.NopLabelFor(model => model.DeliveryDateId)
                                    </div>
                                    <div class="@rightColumnClass">
                                        @Html.NopDropDownListFor(model => model.DeliveryDateId, Model.AvailableDeliveryDates)
                                        @Html.ValidationMessageFor(model => model.DeliveryDateId)
                                    </div>
                                </div>
                            </div>


                        </div>
                        <!-- #endregion -->
                    </div>


                </div>
            </div>

            <!-- #endregion -->
            <div class="panel panel-default" id="mappingId">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.Mappings")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.SelectedCategoryIds)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.EditorFor(model => model.SelectedCategoryIds, new { SelectList = Model.AvailableCategories })
                            <script>
                                $(document).ready(function() {
                                    var categoryIdsInput = $('#@Html.FieldIdFor(model => model.SelectedCategoryIds)').data("kendoMultiSelect");
                                    categoryIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableCategories.Count == 0)
                            {
                            <text>
                                    categoryIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Catalog.Products.Fields.Categories.NoCategoriesAvailable")'
                                    });
                                    categoryIdsInput._placeholder();
                                    categoryIdsInput._enable();
                                    </text>
                                }
                                });
                            </script>
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.Stores ? null : "advanced-setting")">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.SelectedStoreIds)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.EditorFor(model => model.SelectedStoreIds, new { SelectList = Model.AvailableStores })
                            <script>
                                $(document).ready(function() {
                                    var storesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedStoreIds)').data("kendoMultiSelect");
                                    storesIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableStores.Count == 0)
                    {
                        <text>
                                    storesIdsInput.setOptions({
                                        enable: false,
                                        placeholder: 'No stores available'
                                    });
                                    storesIdsInput._placeholder();
                                    storesIdsInput._enable();
                                    </text>
                    }
                                });
                            </script>
                        </div>
                    </div>
                    <div class="form-group @(Model.ProductEditorSettingsModel.Vendor ? null : "advanced-setting")" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.VendorId)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                            @Html.ValidationMessageFor(model => model.VendorId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.SelectedPaidGlCodeIds)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.EditorFor(model => model.SelectedPaidGlCodeIds, new { SelectList = Model.AvailablePaidGLCodes })
                            <script>
                                $(document).ready(function() {
                                    var categoryIdsInput = $('#@Html.FieldIdFor(model => model.SelectedPaidGlCodeIds)').data("kendoMultiSelect");
                                    categoryIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailablePaidGLCodes.Count == 0)
                            {
                            <text>
                                    categoryIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Catalog.Products.Fields.GlCodes.NoGlCodesAvailable")'
                                    });
                                    categoryIdsInput._placeholder();
                                    categoryIdsInput._enable();
                                    </text>
                                }
                                });
                            </script>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.SelectedDeferredGlCodeIds)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.EditorFor(model => model.SelectedDeferredGlCodeIds, new { SelectList = Model.AvailableDeferredGLCodes })
                            <script>
                                $(document).ready(function() {
                                    var categoryIdsInput = $('#@Html.FieldIdFor(model => model.SelectedDeferredGlCodeIds)').data("kendoMultiSelect");
                                    categoryIdsInput.setOptions({
                                        autoClose: false
                                    });

                                    @if (Model.AvailableDeferredGLCodes.Count == 0)
                            {
                            <text>
                                    categoryIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Catalog.Products.Fields.GlCodes.NoGlCodesAvailable")'
                                    });
                                    categoryIdsInput._placeholder();
                                    categoryIdsInput._enable();
                                    </text>
                                }
                                });
                            </script>
                        </div>
                    </div>

                </div>
            </div>
            <div class="panel panel-default @(Model.ProductEditorSettingsModel.RelatedProducts ? null : "advanced-setting")" id="glcodeTaxCategoryMapppingTable">
                <div class="panel-heading">
                    Product GL and Tax Mappings
                </div>
                @if (Model.Id > 0 && (Model.IsMaster || !Model.IsMaster))    /// NU-10
                {
                    <div class="panel-body">
                        <span>Payment GL Codes</span>
                        <div id="productGlCodes-grid"></div>
                        <br />
                        <span>Deferred GL Codes</span>

                        <div id="productGlCodes1-grid"></div>

                        <script>

                            function getTaxCategoryName(value) {
                                @for(int i = 0; i < Model.AvailableTaxCategories.Count; i++)
                            {
                                 var taxproductAttributeItem = Model.AvailableTaxCategories[i];
                                <text>
                                if(@taxproductAttributeItem.Value == value)
                                {
                                    return "@(Html.Raw(HttpUtility.JavaScriptStringEncode(taxproductAttributeItem.Text)))";
                                }
                                </text>
                            }
                            }

                            function getPaidGlCodeName(value) {
                                @for (int i = 0; i < Model.AvailablePaidGLCodes.Count; i++)
                                    {
                                        var paidGlproductAttributeItem = Model.AvailablePaidGLCodes[i];
                                           <text>
                                if(@paidGlproductAttributeItem.Value == value)
                                {
                                    return "@(Html.Raw(HttpUtility.JavaScriptStringEncode(paidGlproductAttributeItem.Text)))";
                                }
                                </text>
                                     }
                            }

                            function getDeferredGlCodeName(value) {
                                @for (int i = 0; i < Model.AvailableDeferredGLCodes.Count; i++)
                                    {
                                        var defGlproductAttributeItem = Model.AvailableDeferredGLCodes[i];
                                           <text>
                                if(@defGlproductAttributeItem.Value == value)
                                {
                                    return "@(Html.Raw(HttpUtility.JavaScriptStringEncode(defGlproductAttributeItem.Text)))";
                                }
                                </text>
                                    }
                            }



                            function onDataBound(e) {
                                var view = this.dataSource.view();
                            }
                            $(document).ready(function () {

                                $("#productGlCodes-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("ProductPaidGlsByProductList", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("UpdateGLCodeMappings", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken

                                            },
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    //GlCodeName: { editable: false, type: "string" },
                                                    Amount: { editable: true, type: "string" },
                                                    Percentage: { editable: true, type: "string" },
                                                    //TaxCategoryId: { editable: true, type: "string" }
                                                    //IsDelivery: { editable: true, type: "string" },

                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update") {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    edit: function (e) {
                                        if (e.model.isNew()) {
                                            //little hack here
                                            //pre-select the first value of kendoui dropdownlist datasource
                                            //for some reasons (maybe, bug) it always sends 0
                                            //if no value has been selected (changed) in the dropdownlist
                                            if (allTaxCategory.length > 0) {
                                                e.model.TaxCategoryId = allTaxCategory[0].Id;
                                            }


                                        }
                                    },
                                    editable: {
                                        confirmation: false,
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    autobind: true,
                                    columns: [
                                        {
                                            field: "GlCodeId",
                                            title: "Gl Code Name",
                                            width: 250,
                                            editor: PaidGlcodeDropDownEditor,
                                            template: "#= getPaidGlCodeName(GlCodeId) #"
                                        } , {
                                            field: "Amount",
                                            title: "Amount",
                                            format:"{0:c2}",
                                            width: 250,
                                        }
                                        , {
                                            field: "Percentage",
                                            title: "Percentage",
                                            format:"{0:c2}",
                                            width: 250,
                                        }
                                         , {
                                             field: "TaxCategoryId",
                                             title: "Tax Category",
                                             width: 250,
                                             editor: taxCategoryDropDownEditor,
                                             template: "#= getTaxCategoryName(TaxCategoryId) #"
                                         },{
                                             command: [{
                                                 name: "edit",
                                                 text: {
                                                     edit: "@T("Admin.Common.Edit")",
                                                     update: "@T("Admin.Common.Update")",
                                                     cancel: "@T("Admin.Common.Cancel")"
                                                 }
                                             }],
                                             width: 200
                                         }]
                                });

                                $("#productGlCodes1-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("ProductDeliveredGlsByProductList", "Product", new { productId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("UpdateGLCodeMappings", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken

                                            },
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    //GlCodeName: { editable: false, type: "string" },
                                                    Amount: { editable: true, type: "string" },
                                                    Percentage: { editable: true, type: "string" },
                                                    //TaxCategoryId: { editable: true }
                                                    //IsDelivery: { editable: true, type: "string" },

                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update") {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    edit: function (e) {
                                        if (e.model.isNew()) {
                                            //little hack here
                                            //pre-select the first value of kendoui dropdownlist datasource
                                            //for some reasons (maybe, bug) it always sends 0
                                            //if no value has been selected (changed) in the dropdownlist
                                            if (allTaxCategory.length > 0) {
                                                e.model.TaxCategoryId = allTaxCategory[0].Id;
                                            }
                                            if (allDeferredGLCodes.length > 0) {
                                                e.model.GlCodeId = allDeferredGLCodes[0].Id;
                                            }

                                        }
                                    },
                                    editable: {
                                        confirmation: false,
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    autobind: true,
                                    columns: [
                                        {
                                            field: "GlCodeId",
                                            title: "Gl Code Name",
                                            width: 250,
                                            editor: DeliveredGlcodeDropDownEditor,
                                            template: "#= getDeferredGlCodeName(GlCodeId) #"
                                        } , {
                                            field: "Amount",
                                            title: "Amount",
                                            format:"{0:c2}",
                                            width: 250,
                                        }
                                        , {
                                            field: "Percentage",
                                            title: "Percentage",
                                            width: 250,
                                        }
                                         , {
                                             field: "TaxCategoryId",
                                             title: "Tax Category",
                                             width: 250,
                                             editor: taxCategoryDropDownEditor,
                                             template: "#= getTaxCategoryName(TaxCategoryId) #"

                                         },{
                                             command: [{
                                                 name: "edit",
                                                 text: {
                                                     edit: "@T("Admin.Common.Edit")",
                                                     update: "@T("Admin.Common.Update")",
                                                     cancel: "@T("Admin.Common.Cancel")"
                                                 }
                                             }],
                                             width: 200
                                         }]
                                });


                            });
                            var allTaxCategory = [
                            @for (int i = 0; i < Model.AvailableTaxCategories.Count; i++)
                            {

                                var productAttributeItem = Model.AvailableTaxCategories[i];
                                <text>
                                        {
                                            Id: @(productAttributeItem.Value),
                                            Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(productAttributeItem.Text)))"
                                        }
                                   </text>
                                if (i != Model.AvailableTaxCategories.Count - 1)
                                {
                                    <text>,</text>
                                }
                          }];

                            var allPaidGLCodes = [
                            @for (int i = 0; i < Model.AvailablePaidGLCodes.Count; i++)
                            {

                                var productAttributeItem = Model.AvailablePaidGLCodes[i];
                                <text>
                                      {
                                          Id: @(productAttributeItem.Value),
                                          Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(productAttributeItem.Text)))"
                                      }
                                          </text>
                                if (i != Model.AvailablePaidGLCodes.Count - 1)
                                {
                                    <text>,</text>
                                }
                            }];

                            var allDeferredGLCodes = [
                            @for (int i = 0; i < Model.AvailableDeferredGLCodes.Count; i++)
                            {

                                var productAttributeItem = Model.AvailableDeferredGLCodes[i];
                                <text>
                                      {
                                          Id: @(productAttributeItem.Value),
                                          Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(productAttributeItem.Text)))"
                                      }
                                          </text>
                                if (i != Model.AvailableDeferredGLCodes.Count - 1)
                                {
                                    <text>,</text>
                                }
                          }];


                            function taxCategoryDropDownEditor(container, options) {
                                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:TaxCategoryId"/>')
                                        .appendTo(container)
                                        .kendoDropDownList({
                                            autoBind: false,
                                            dataSource: allTaxCategory
                                        });
                            }
                            function PaidGlcodeDropDownEditor(container, options) {
                                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:GlCodeId"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataSource: allPaidGLCodes
                                    });
                            }
                            function DeliveredGlcodeDropDownEditor(container, options) {
                                $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:GlCodeId"/>')
                                    .appendTo(container)
                                    .kendoDropDownList({
                                        autoBind: false,
                                        dataSource: allDeferredGLCodes
                                    });
                            }



                        </script>

                    </div>
                    <div class="panel-footer">



                        <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("relatedproductaddpopup", "Product" , new {productid=Model.Id, btnid="btnRefreshRelatedProducts" , formid="product-form" }))', 800, 800, true); return false;">
                            @T("Admin.Catalog.Products.RelatedProducts.AddNew")
                        </button>
                        <input type="submit" id="btnRefreshRelatedProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function() {
                                $('#btnRefreshRelatedProducts').click(function() {
                                    //refresh grid
                                    var grid = $("#relatedproducts-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </div>
                            @*<div class="panel-footer">
                                    <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "Product", new {productId = Model.Id, btnId = "btnRefreshRelatedProducts", formId = "product-form"}))', 800, 800, true); return false;">
                                        @T("Admin.Catalog.Products.RelatedProducts.AddNew")
                                    </button>
                                    <input type="submit" id="btnRefreshRelatedProducts" style="display: none" />
                                    <script type="text/javascript">
                                        $(document).ready(function() {
                                            $('#btnRefreshRelatedProducts').click(function() {
                                                //refresh grid
                                                var grid = $("#relatedproducts-grid").data('kendoGrid');
                                                grid.dataSource.read();

                                                //return false to don't reload a page
                                                return false;
                                            });
                                        });
                                    </script>
                                </div>*@
                }
                else
                {
                    <div class="panel-body">
                        @T("Admin.Catalog.Products.RelatedProducts.SaveBeforeEdit")
                    </div>
                }
            </div>

            <div class="panel panel-default @(Model.ProductEditorSettingsModel.ACL ? null : "advanced-setting")">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.Security")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.SelectedCustomerRoleIds)
                        </div>
                        <div class="@rightColumnClass">
                            <div class="panel-heading">
                            </div>
                            <div class="panel-heading">
                            </div>
                            @*@if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                                {*@<Nop.Core.IWorkContext>
                                @Html.EditorFor(model => model.SelectedCustomerRoleIds, new { SelectList = Model.AvailableCustomerRoles })
                                <script>
                                    $(document).ready(function() {
                                        var rolesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedCustomerRoleIds)').data("kendoMultiSelect");
                                        rolesIdsInput.setOptions({
                                            autoClose: false
                                        });

                                        @if (Model.AvailableCustomerRoles.Count == 0)
                                                                {
                                                                    <text>
                                        rolesIdsInput.setOptions({
                                            enable: false,
                                            placeholder: 'No customer roles available'
                                        });
                                        rolesIdsInput._placeholder();
                                        rolesIdsInput._enable();
                                        </text>
                                                                }
                                    });
                                </script>
                                @*}
                                    else
                                    {
                                        @Html.NopDisplayFor(model => model.SelectedCustomerRoleIds)
                                    }*@

                        </div>
                    </div>
                </div>
            </div>
            @*@(Model.ProductEditorSettingsModel.RequireOtherProductsAddedToTheCart ? null : "advanced-setting")*@
            <div class="panel panel-default" id="group-required-other-products">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.RequireOtherProducts")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.RequireOtherProducts)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.RequireOtherProducts)
                            @Html.ValidationMessageFor(model => model.RequireOtherProducts)
                        </div>
                    </div>
                    <div id="requiredOtherProductsOption">
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                    @Html.Label("Option")
                             </div>
                        </div>
                        <div class="col-md-9">
                            @Html.RadioButtonFor(model => model.RequireOtherProductsOption, "OR")
                            <label>OR</label>
                         </div>
                        <div class="col-md-9">
                            @Html.RadioButtonFor(model => model.RequireOtherProductsOption, "AND")
                            <label>AND</label>
                        </div>
                    </div>
                    </div>
                    <div id="pnlRequiredProductIds">
                        <div class="form-group">
                            <div class="@leftColumnClass">
                                @Html.NopLabelFor(model => model.RequiredProductIds)
                            </div>
                            <div class="@rightColumnClass">
                                <div class="input-group">
                                    @Html.NopEditorFor(model => model.RequiredProductIds)
                                    <span class="input-group-btn">
                                        <input type="submit" id="btnRefreshRequiredProducts" style="display: none" />
                                        <script type="text/javascript">
                                            $(document).ready(function() {
                                                $('#btnRefreshRequiredProducts').click(function() {
                                                    //refresh product list
                                                    loadRequiredProductFriendlyNames();

                                                    //return false to don't reload a page
                                                    return false;
                                                });
                                            });
                                        </script>
                                        <button type="submit" id="btnAddNewRequiredProduct" onclick="javascript:OpenWindow('@(Url.Action("RequiredProductAddPopup", "Product", new {btnId = "btnRefreshRequiredProducts", productIdsInput = "RequiredProductIds"}))', 800, 850, true); return false;" class="btn btn-info">
                                            @T("Admin.Catalog.Products.Fields.RequiredProductIds.AddNew")
                                        </button>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.RequiredProductIds)
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="@leftColumnClass">
                                <span id="required-products-check-progress" style="display: none; float: right" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                            <div class="@rightColumnClass">
                                <span id="required-product-names"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group" id="pnlAutomaticallyAddRequiredProducts">
                        <div class="@leftColumnClass">
                            @Html.NopLabelFor(model => model.AutomaticallyAddRequiredProducts)
                        </div>
                        <div class="@rightColumnClass">
                            @Html.NopEditorFor(model => model.AutomaticallyAddRequiredProducts)
                            @Html.ValidationMessageFor(model => model.AutomaticallyAddRequiredProducts)
                        </div>
                    </div>
                </div>
            </div>
            @*@(Model.ProductEditorSettingsModel.RelatedProducts ? null : "advanced-setting")*@
            <div class="panel panel-default">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.RelatedProducts")
                </div>
                @if (Model.Id > 0 && !Model.IsMaster)    /// NU-10
                {
                    <div class="panel-body">
                        <p>
                            @T("Admin.Catalog.Products.RelatedProducts.Hint")
                        </p>
                        <div id="relatedproducts-grid"></div>

                        <script>
                            $(document).ready(function() {
                                $("#relatedproducts-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("RelatedProductList", "Product", new {productId = Model.Id}))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("RelatedProductUpdate", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy: {
                                                url: "@Html.Raw(Url.Action("RelatedProductDelete", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    Product2Name: { editable: false, type: "string" },
                                                    DisplayOrder: { editable: true, type: "number" },
                                                    ProductId2: { editable: false, type: "number" }
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type == "update") {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [
                                        {
                                            field: "Product2Name",
                                            title: "@T("Admin.Catalog.Products.RelatedProducts.Fields.Product")",
                                            width: 250,
                                            template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId2#">#=Product2Name#</a>'
                                        }, {
                                            field: "DisplayOrder",
                                            title: "@T("Admin.Catalog.Products.RelatedProducts.Fields.DisplayOrder")",
                                            //integer format
                                            format: "{0:0}",
                                            width: 120
                                        }, {
                                            command: [
                                                        {
                                                            name: "edit",
                                                            text: {
                                                                edit: "@T("Admin.Common.Edit")",
                                                                update: "@T("Admin.Common.Update")",
                                                                cancel: "@T("Admin.Common.Cancel")"
                                                            }
                                                        }, {
                                                            name: "destroy",
                                                            text: "@T("Admin.Common.Delete")"
                                                        }
                                            ],
                                            width: 220
                                        }
                                    ]
                                });
                            });
                        </script>
                    </div>
                    <div class="panel-footer">
                        <button type="submit" id="btnAddNewRelatedProduct" class="btn btn-primary" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "Product", new {productId = Model.Id, btnId = "btnRefreshRelatedProducts", formId = "product-form"}))', 800, 800, true); return false;">
                            @T("Admin.Catalog.Products.RelatedProducts.AddNew")
                        </button>
                        <input type="submit" id="btnRefreshRelatedProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function() {
                                $('#btnRefreshRelatedProducts').click(function() {
                                    //refresh grid
                                    var grid = $("#relatedproducts-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </div>
                }
                else
                {
                    <div class="panel-body">
                        @T("Admin.Catalog.Products.RelatedProducts.SaveBeforeEdit")
                    </div>
                }
            </div>
            @*@(Model.ProductEditorSettingsModel.CrossSellsProducts ? null : "advanced-setting")*@
            <div class="panel panel-default">
                <div class="panel-heading">
                    @T("Admin.Catalog.Products.CrossSells")
                </div>
                @if (Model.Id > 0 && !Model.IsMaster)    /// NU-10
                {
                    <div class="panel-body">
                        <p>
                            @T("Admin.Catalog.Products.CrossSells.Hint")
                        </p>
                        <div id="crosssellproducts-grid"></div>

                        <script>
                            $(document).ready(function() {
                                $("#crosssellproducts-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("CrossSellProductList", "Product", new {productId = Model.Id}))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy: {
                                                url: "@Html.Raw(Url.Action("CrossSellProductDelete", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    Product2Name: { editable: false, type: "string" },
                                                    ProductId2: { editable: false, type: "number" }
                                                }
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [
                                        {
                                            field: "Product2Name",
                                            title: "@T("Admin.Catalog.Products.CrossSells.Fields.Product")",
                                            template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId2#">#=Product2Name#"</a>'
                                        }, {
                                            command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                            title: "@T("Admin.Common.Delete")",
                                            width: 200
                                        }
                                    ]
                                });
                            });
                        </script>
                    </div>
                    <div class="panel-footer">
                        <button type="submit" id="btnAddNewCrossSellProduct" onclick="javascript:OpenWindow('@(Url.Action("CrossSellProductAddPopup", "Product", new {productId = Model.Id, btnId = "btnRefreshCrossSellProducts", formId = "product-form"}))', 800, 800, true); return false;" class="btn btn-primary">
                            @T("Admin.Catalog.Products.CrossSells.AddNew")
                        </button>
                        <input type="submit" id="btnRefreshCrossSellProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function() {
                                $('#btnRefreshCrossSellProducts').click(function() {
                                    //refresh grid
                                    var grid = $("#crosssellproducts-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </div>
                }
                else
                {
                    <div class="panel-body">
                        @T("Admin.Catalog.Products.CrossSells.SaveBeforeEdit")
                    </div>
                }
            </div>

            @*@(Model.ProductEditorSettingsModel.IsReservation ? null : "advanced-setting")*@
            


        </div>
    </div>
</div>
<script type="text/javascript">
    $('#SpecialPrice').blur(function(){
        var specialPrice=$('#SpecialPrice').val();
        var Price=(parseFloat($('#Price').val())- (parseFloat(50* $('#Price').val())/100))

        if(parseFloat($('#SpecialPrice').val())==0 ||parseFloat($('#SpecialPrice').val())==0.00 ||parseFloat($('#SpecialPrice').val())<0)
        {
            alert("Special price must be greater than $0.00");
            $('#SpecialPrice').val('');
        }
        else if(parseFloat(specialPrice)<=parseFloat(Price))
        {
            var confirmValue=confirm("You are setting Special Price less than 50% of regular price. Are you sure you want to continue?");
            if(!confirmValue)
            {
                $('#SpecialPrice').val('');
            }

        }
    })
</script>
<script>
    $(document).ready(function () {
        $(function() {
            //initialise Reservation defaults.
            $("#ReservationStartHour option[value='@Model.ReservationSelectedStartHour']").prop('selected', true);
            $("#ReservationStartMinute option[value='@Model.ReservationSelectedStartMinute']").prop('selected', true);
            $("#ReservationStartAMPM option[value='@Model.ReservationSelectedStartAMPM']").prop('selected', true);

            $("#ReservationEndHour option[value='@Model.ReservationSelectedEndHour']").prop('selected', true);
            $("#ReservationEndMinute option[value='@Model.ReservationSelectedEndMinute']").prop('selected', true);
            $("#ReservationEndAMPM option[value='@Model.ReservationSelectedEndAMPM']").prop('selected', true);

            $("#MaxOccupancy").val('@Model.MaxOccupancy');
        });
        if ($("#TaxCategoryId").val() == -1) {
            $('#glcodeTaxCategoryMapppingTable').show();

        }
        else {
            $('#glcodeTaxCategoryMapppingTable').hide()

        }})

    $("#TaxCategoryId").change(function () {
        if ($("#TaxCategoryId").val() == -1) {
            $('#glcodeTaxCategoryMapppingTable').show()
            $('#SpecialPrice').val('');
            $('#SpecialPrice').attr("readonly", "readonly");
        }
        else {
            $('#glcodeTaxCategoryMapppingTable').hide()
            $('#specialPricediv').show();
            $('#SpecialPrice').val('');
            $('#SpecialPrice').removeAttr("readonly");

        }
    })

</script>