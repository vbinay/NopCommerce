@model StoreModel
@using Nop.Core.Domain.Customers;
@using Nop.Core.Infrastructure;
@using Nop.Services.Customers;
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)


<script type="text/javascript">
    $(document).ready(function () {
        $("#@Html.FieldIdFor(model => model.SslEnabled)").click(toggleSslEnabled);
        toggleSslEnabled();

        $("#@Html.FieldIdFor(model => model.IsTieredShippingEnabled)").click(toggleTieredShipping);
        toggleTieredShipping();   

        $("#@Html.FieldIdFor(model => model.CompanyCountryId)").change(function () {
            var selectedItem = $(this).val();
            if(selectedItem != '') {
                var ddlStates = $("#@Html.FieldIdFor(model => model.CompanyStateProvinceId)");
                ddlStates.html('');
                ddlStates.append($('<option></option>').html("Loading.."));

                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            }
        });
    });

        
    function toggleSslEnabled() {
        if ($('#@Html.FieldIdFor(model => model.SslEnabled)').is(':checked')) {
            $('#pnlSecureUrl').show();
        } else {
            $('#pnlSecureUrl').hide();
        }
    }

    function toggleTieredShipping() {
        if ($('#@Html.FieldIdFor(model => model.IsTieredShippingEnabled)').is(':checked')) {
            $('#pnlTieredShipping').show();
        } else {
            $('#pnlTieredShipping').hide();
        }
    }

    $(document).ready(function () {
        @if (EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
        {
             <text>$('#Name,#Url,#SecureUrl,#DisplayOrder,#Hosts,#CompanyName,#CompanyAddress,#CompanyPhoneNumber,#CompanyVat,#CurrentSeason,#DiningSiteUrl,#ExtKey').attr("readonly", "readonly");</text>
        }
    });
</script>
@Html.Partial("_CreateOrUpdate.Contacts", Model)
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    @(Html.LocalizedEditor<StoreModel, StoreLocalizedModel>
                                ("store-localized",
                                @<div>
                                    <div class="form-group">
                                        <div class="col-md-3">
                                            @Html.NopLabelFor(model => model.Locales[item].Name)
                                        </div>
                                        <div class="col-md-9">
                                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>
                                        ().CurrentCustomer.IsStoreAdmin())
                                            {
                                                @Html.NopEditorFor(model => model.Locales[item].Name)
                                            }
                                            else
                                            {
                                                @Html.NopDisplayFor(model => model.Locales[item].Name)
                                            }
                                            /**/
                                            @Html.ValidationMessageFor(model => model.Locales[item].Name)
                                        </div>
                                    </div>
                                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                                </div>
                        ,
                    @<div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Name)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.Name)
                                @Html.ValidationMessageFor(model => model.Name)
                            </div>
                        </div>
                    </div>
                    ))
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Url)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Url)
                            @Html.ValidationMessageFor(model => model.Url)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SslEnabled)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>
                ().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.SslEnabled)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.SslEnabled)
                            }
                            @Html.ValidationMessageFor(model => model.SslEnabled)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-9 col-md-offset-3">
                            <em>@T("Admin.Configuration.Stores.Fields.SslEnabled.Hint2")</em>
                        </div>
                    </div>
                    <div class="form-group" id="pnlSecureUrl">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SecureUrl)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.SecureUrl)
                            @Html.ValidationMessageFor(model => model.SecureUrl)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Hosts)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Hosts)
                            @Html.ValidationMessageFor(model => model.Hosts)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DefaultLanguageId)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>
                ().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopDropDownListFor(model => model.DefaultLanguageId, Model.AvailableLanguages)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.DefaultLanguageId)
                            }
                            @Html.ValidationMessageFor(model => model.DefaultLanguageId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DisplayOrder)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DisplayOrder)
                            @Html.ValidationMessageFor(model => model.DisplayOrder)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyName)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyName)
                            @Html.ValidationMessageFor(model => model.CompanyName)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyAddress)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyAddress)
                            @Html.ValidationMessageFor(model => model.CompanyAddress)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyAddress2)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyAddress2)
                            @Html.ValidationMessageFor(model => model.CompanyAddress2)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyCity)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyCity)
                            @Html.ValidationMessageFor(model => model.CompanyCity)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyStateProvinceId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.CompanyStateProvinceId, Model.AvailableStates)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyZipPostalCode)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyZipPostalCode)
                            @Html.ValidationMessageFor(model => model.CompanyZipPostalCode)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyCountryId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyCountryId)
                            @Html.ValidationMessageFor(model => model.CompanyCountryId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyPhoneNumber)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyPhoneNumber)
                            @Html.ValidationMessageFor(model => model.CompanyPhoneNumber)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CompanyVat)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CompanyVat)
                            @Html.ValidationMessageFor(model => model.CompanyVat)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CurrentSeason)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.CurrentSeason)
                            @Html.ValidationMessageFor(model => model.CurrentSeason)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DiningSiteUrl)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DiningSiteUrl)
                            @Html.ValidationMessageFor(model => model.DiningSiteUrl)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ExtKey)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ExtKey)
                            @Html.ValidationMessageFor(model => model.ExtKey)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.LegalEntity)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.LegalEntity)
                            @Html.ValidationMessageFor(model => model.LegalEntity)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsEnabled)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.IsEnabled)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.InactiveDate)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.InactiveDate);
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ShipperId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ShipperId)
                            @Html.ValidationMessageFor(model => model.ShipperId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsInterOfficeDeliveryEnabled)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsInterOfficeDeliveryEnabled)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsInterOfficeDeliveryEnabled)
                            }
                            @Html.ValidationMessageFor(model => model.IsInterOfficeDeliveryEnabled)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsContractShippingEnabled)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsContractShippingEnabled)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsContractShippingEnabled)
                            }
                            @Html.ValidationMessageFor(model => model.IsContractShippingEnabled)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsTieredShippingEnabled)
                        </div>
                        <div class="col-md-9">
                            @if (!EngineContext.Current.Resolve<Nop.Core.IWorkContext>().CurrentCustomer.IsStoreAdmin())
                            {
                                @Html.NopEditorFor(model => model.IsTieredShippingEnabled)
                            }
                            else
                            {
                                @Html.NopDisplayFor(model => model.IsTieredShippingEnabled)
                            }
                            @Html.ValidationMessageFor(model => model.IsTieredShippingEnabled)
                        </div>
                    </div>
                    <div class="panel panel-default" id="pnlTieredShipping">
                        <div class="panel-body">
                            <div id="grid"></div>
                            <script>
                                $(document).ready(function () {
                                    dataSource = new kendo.data.DataSource({
                                        transport: {
                                            read: {
                                                url: "/Store/GetTieredShipping",
                                                dataType: "json"
                                            },
                                            update: {
                                                url: "/Store/UpdateTieredShipping",
                                                dataType: "json",
                                            },
                                            destroy: {
                                                url: "/Store/DeleteTieredShipping",
                                                dataType: "json"
                                            },
                                            create: {
                                                url: "/Store/CreateTieredShipping",
                                                dataType: "json"
                                            },
                                            parameterMap: function (options, operation) {
                                                console.log(options.models);
                                                if (operation == "create" && options.models !== undefined) {
                                                    if (options.models[0].Id == null)
                                                        options.models[0].Id = 0;
                                                }
                                                if (operation !== "read" && options.models) {
                                                    return {
                                                        models: kendo.stringify(options.models[0])
                                                    };
                                                }
                                            }
                                        },
                                        batch: true,
                                        pageSize: 20,
                                        schema: {
                                            data: "Data",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    Id: { editable: false, nullable: true },
                                                    MinPrice: { type: "number" },
                                                    MaxPrice: { type: "number" },
                                                    ShippingAmount: { type: "number" }
                                                }
                                            }
                                        }
                                    });
                                    $("#grid").kendoGrid({
                                        dataSource: dataSource,
                                        pageable: {
                                            refresh: true,
                                            pageSizes: 10,
                                        },
                                        toolbar: ["create"],
                                        edit: function (e) {
                                            if (e.model.isNew()) {
                                                var attr = $("input[type='text'][name='MinPrice']").attr("aria-valuenow");
                                                if (typeof attr !== typeof undefined && attr !== false) {
                                                    $.ajax({
                                                        method: "GET",
                                                        dataType: "json",
                                                        url: "@Html.Raw(Url.Action("GetMinPrice", "Store"))",
                                                        async: false,
                                                        cache: false,
                                                        beforeSend: function(){
                                                            //$('.ajax-loading-block-window').show();
                                                        },
                                                        success: function (Data) {
                                                            if (Data > -1) {
                                                                $("input[type='text'][name='MinPrice']").val(Data);
                                                            }
                                                            else {
                                                                alert("Final tier has already been created for shipping.\n If you want to change final tier shipping prices, \n please update the final tier MaxPrice to something other than 0 \n and then continue.");
                                                                e.preventDefault();
                                                                //var row = e.target.closest('tr');
                                                                //var uid = $(row).data(uid)
                                                                //dataSource = $("#grid").data("kendoGrid").dataSource
                                                                //var item = dataSource.getByUid(uid.uid);
                                                                //dataSource.cancelChanges(item);
                                                                //var container = this.wrapper.children(".k-grid-content"); // or ".k-virtual-scrollable-wrap"
                                                                //scrollOffset.left = container.scrollLeft();
                                                                //scrollOffset.top = container.scrollTop();
                                                                //this.refresh();
                                                            }
                                                        },
                                                        error: function (jqXHR, textStatus, errorThrown) {
                                                            console.log(errorThrown);
                                                            //displayAjaxLoading(false);
                                                        },
                                                        complete: function (data) {
                                                           // displayAjaxLoading(false);
                                                        }
                                                    });
                                                }
                                            }
                                        },
                                        editable: "inline",
                                        columns: [
                                            { field: "MinPrice", title: "Min Price" },
                                            { field: "MaxPrice", title: "Max Price" },
                                            { field: "ShippingAmount", title: "Shipping Amount" },
                                            { command: ["edit", "destroy"], title: "Actions", width: "250px" }]
                                    });
                                });
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

   