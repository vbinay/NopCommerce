@model OrderModel

@using Nop.Core.Domain.Tax;
@using Nop.Core.Domain.Orders;
@using Nop.Services

@if (!Model.IsLoggedInAsVendor)
{
    <script type="text/javascript">
        $(document).ready(function () {
            toggleChangeOrderStatus(false);
            toggleOrderTotals(false);
            toggleCC(false);
            $("#gridPartialRefund").hide();
            $('#gridCustomRefund').hide();
        });

        function openGrid() {
            $("#gridPartialRefund").show();
            $('#gridCustomRefund').hide();
        }

        function openCustomeRefundGrid() {
            $('#gridCustomRefund').show();
            $("#gridPartialRefund").hide();
        }

        function toggleChangeOrderStatus(editmode) {
            if (editmode) {
                $('#pnlChangeOrderStatus').show();
                $('#btnChangeOrderStatus').hide();
            } else {
                $('#pnlChangeOrderStatus').hide();
                $('#btnChangeOrderStatus').show();
            }
        }

        function toggleOrderTotals(editmode) {
            if (editmode) {
                $('#trEditOrderTotals').show();
                $('#btnEditOrderTotals').hide();
                $('#btnSaveOrderTotals').show();
                $('#btnCancelOrderTotals').show();
            } else {
                $('#trEditOrderTotals').hide();
                $('#btnEditOrderTotals').show();
                $('#btnSaveOrderTotals').hide();
                $('#btnCancelOrderTotals').hide();
            }
        }

        function toggleCC(editmode) {
            if (editmode) {
                $('#lblCardType').hide();
                $('#@Html.FieldIdFor(model => model.CardType)').show();
                $('#lblCardName').hide();
                $('#@Html.FieldIdFor(model => model.CardName)').show();
                $('#lblCardNumber').hide();
                $('#@Html.FieldIdFor(model => model.CardNumber)').show();
                $('#lblCardCvv2').hide();
                $('#@Html.FieldIdFor(model => model.CardCvv2)').show();
                $('#lblCardExpirationMonth').hide();
                $('#@Html.FieldIdFor(model => model.CardExpirationMonth)').show();
                $('#lblCardExpirationYear').hide();
                $('#@Html.FieldIdFor(model => model.CardExpirationYear)').show();
                $('#btnEditCC').hide();
                $('#btnSaveCC').show();
                $('#btnCancelCC').show();
            } else {
                $('#lblCardType').show();
                $('#@Html.FieldIdFor(model => model.CardType)').hide();
                $('#lblCardName').show();
                $('#@Html.FieldIdFor(model => model.CardName)').hide();
                $('#lblCardNumber').show();
                $('#@Html.FieldIdFor(model => model.CardNumber)').hide();
                $('#lblCardCvv2').show();
                $('#@Html.FieldIdFor(model => model.CardCvv2)').hide();
                $('#lblCardExpirationMonth').show();
                $('#@Html.FieldIdFor(model => model.CardExpirationMonth)').hide();
                $('#lblCardExpirationYear').show();
                $('#@Html.FieldIdFor(model => model.CardExpirationYear)').hide();
                $('#btnEditCC').show();
                $('#btnSaveCC').hide();
                $('#btnCancelCC').hide();
            }
        }
    </script>
}

<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-body">
            @if (!Model.IsLoggedInAsVendor)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.OrderStatus)
                    </div>
                    <div class="col-md-9">
                        <div class="input-group input-group-short">
                            <div class="input-group-text">
                                <strong>
                                    @Html.NopDisplayFor(model => model.OrderStatus)
                                </strong>
                            </div>
                            <div class="input-group-btn">
                                @if (Model.CanCancelOrder)
                                {
                                    //HIDING AT THIS MOMENT FOR ALL
                                    @*<button type="submit" name="cancelorder" id="cancelorder" class="btn bg-red" style="margin-right: 3px;">
                                            @T("Admin.Orders.Fields.OrderStatus.Cancel")
                                        </button>
                                        @Html.ActionConfirmation("cancelorder")*@
                                }
                                @if (!Model.IsReadOnly)
                                {
                                    if (Model.IsLoggedAs == "ADMIN" || Model.IsLoggedAs == "STORE.ADMIN")   // NU-30
                                    {
                                        <button type="submit" name="btnChangeOrderStatus" onclick="toggleChangeOrderStatus(true);return false;" id="btnChangeOrderStatus" class="btn btn-primary">
                                            @T("Admin.Orders.Fields.OrderStatus.Change")
                                        </button>
                                        <div id="pnlChangeOrderStatus" style="margin-top: 3px;">
                                            <div>
                                                <em>@T("Admin.Orders.Fields.OrderStatus.Change.ForAdvancedUsers")</em>
                                            </div>
                                            @Html.NopDropDownListFor(model => model.OrderStatusId, ((OrderStatus)Model.OrderStatusId).ToSelectList())
                                            <button type="submit" name="btnSaveOrderStatus" id="btnSaveOrderStatus" class="btn btn-primary" style="margin-left: 3px">
                                                @T("Admin.Common.Save")
                                            </button>
                                            @Html.ActionConfirmation("btnSaveOrderStatus")

                                            <button type="submit" name="btnCancelOrderStatus" onclick="toggleChangeOrderStatus(false);return false;" id="btnCancelOrderStatus" class="btn bg-teal" style="margin-left: 3px">
                                                @T("Admin.Common.Cancel")
                                            </button>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.Id)
                </div>
                <div class="col-md-9">
                    @Html.NopDisplayFor(model => model.Id)
                </div>
            </div>
            @if (!Model.IsLoggedInAsVendor)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.OrderGuid)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.OrderGuid)
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.StoreName)
                </div>
                <div class="col-md-9">
                    @Html.NopDisplayFor(model => model.StoreName)
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-body">
            @if (!Model.IsLoggedInAsVendor)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CustomerId)
                    </div>
                    <div class="col-md-9">
                        @Html.ActionLink(Model.CustomerInfo, "Edit", "Customer", new { id = Model.CustomerId }, new { })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CustomerIp)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.CustomerIp)
                    </div>
                </div>
                if (Model.RecurringPaymentId > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.RecurringPaymentId)
                        </div>
                        <div class="col-md-9">
                            <a href="@Url.Action("Edit", "RecurringPayment", new {id = Model.RecurringPaymentId})">@T("Admin.Common.View")</a>
                        </div>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.VatNumber))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.VatNumber)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.VatNumber)
                        </div>
                    </div>
                }
                if (Model.AffiliateId > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AffiliateId)
                        </div>
                        <div class="col-md-9">
                            <a href="@Url.Action("Edit", "Affiliate", new {id = Model.AffiliateId})">@Model.AffiliateName - @T("Admin.Common.View")</a>
                        </div>
                    </div>
                }

                <div class="form-group">
                    <div class="col-md-3">
                        <div class="label-wrapper">
                            <label class="control-label">@T("Admin.Orders.Fields.OrderSubtotal")</label>
                            <div class="ico-help" title="@T("Admin.Orders.Fields.OrderSubtotal.Hint")">
                                <i class="fa fa-question-circle"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-7">
                        <div class="row">
                            @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
                            {
                                <div class="col-md-2">
                                    <div class="form-text-row">
                                        @Html.DisplayFor(model => model.OrderSubtotalInclTax) <strong>@T("Admin.Orders.Fields.OrderSubtotalInclTax")</strong>
                                    </div>
                                </div>
                            }
                            @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
                            {
                                <div class="col-md-10">
                                    <div class="form-text-row">
                                        @Html.DisplayFor(model => model.OrderSubtotalExclTax) <strong>@T("Admin.Orders.Fields.OrderSubtotalExclTax")</strong>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                if (((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax) && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountInclTax)) ||
                    ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax) && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountExclTax)))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                <label class="control-label">@T("Admin.Orders.Fields.OrderSubTotalDiscount")</label>
                                <div class="ico-help" title="@T("Admin.Orders.Fields.OrderSubTotalDiscount.Hint")">
                                    <i class="fa fa-question-circle"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <div class="row">
                                @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax) && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountInclTax))
                                {
                                    <div class="col-md-2">
                                        <div class="form-text-row">
                                            @Html.DisplayFor(model => model.OrderSubTotalDiscountInclTax) <strong>@T("Admin.Orders.Fields.OrderSubTotalDiscountInclTax")</strong>
                                        </div>
                                    </div>
                                }
                                @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax) && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountExclTax))
                                {
                                    <div class="col-md-10">
                                        <div class="form-text-row">
                                            @Html.DisplayFor(model => model.OrderSubTotalDiscountExclTax) <strong>@T("Admin.Orders.Fields.OrderSubTotalDiscountExclTax")</strong>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        <div class="label-wrapper">
                            <label class="control-label">Shipping Fee/Delivery Fee</label>
                            <div class="ico-help" title="Shipping Fee/Delivery Fee">
                                <i class="fa fa-question-circle"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-7">
                        <div class="row">
                            @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
                            {
                                <div class="col-md-2">
                                    <div class="form-text-row">
                                        @Html.DisplayFor(model => model.OrderShippingInclTax) <strong>@T("Admin.Orders.Fields.OrderShippingInclTax")</strong>
                                    </div>
                                </div>
                            }
                            @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
                            {
                                <div class="col-md-2">
                                    <div class="form-text-row">
                                        @Html.DisplayFor(model => model.OrderShippingExclTax) <strong>@T("Admin.Orders.Fields.OrderShippingExclTax")</strong>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                if (((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax) && !String.IsNullOrEmpty(Model.PaymentMethodAdditionalFeeInclTax)) ||
                    ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax) && !String.IsNullOrEmpty(Model.PaymentMethodAdditionalFeeExclTax)))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                <label class="control-label">@T("Admin.Orders.Fields.PaymentMethodAdditionalFee")</label>
                                <div class="ico-help" title="@T("Admin.Orders.Fields.PaymentMethodAdditionalFee.Hint")">
                                    <i class="fa fa-question-circle"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <div class="row">
                                @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
                                {
                                    <div class="col-md-2">
                                        <div class="form-text-row">
                                            @Html.DisplayFor(model => model.PaymentMethodAdditionalFeeInclTax) <strong>@T("Admin.Orders.Fields.PaymentMethodAdditionalFeeInclTax")</strong>
                                        </div>
                                    </div>
                                }
                                @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
                                {
                                    <div class="col-md-2">
                                        <div class="form-text-row">
                                            @Html.DisplayFor(model => model.PaymentMethodAdditionalFeeExclTax) <strong>@T("Admin.Orders.Fields.PaymentMethodAdditionalFeeExclTax")</strong>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                if (Model.DisplayTaxRates)
                {
                    foreach (var tr in Model.TaxRates)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.Tax) <span style="padding-top: 7px;margin-right: 5px;float: right;">@tr.Rate%</span>
                            </div>
                            <div class="col-md-9">
                                @tr.Value
                            </div>
                        </div>
                    }
                }
                if (Model.DisplayTax)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Tax)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.Tax)
                        </div>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.OrderTotalDiscount))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderTotalDiscount)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.OrderTotalDiscount)
                        </div>
                    </div>
                }
                foreach (var gc in Model.GiftCards)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.GiftCards[0].CouponCode)
                            <span style="padding-top: 7px;margin-right: 5px;float: right;">(@(gc.CouponCode))</span>
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplay(gc.Amount)
                        </div>
                    </div>
                }
                if (Model.RedeemedRewardPoints > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.RedeemedRewardPoints)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplay(Model.RedeemedRewardPoints + @T("Admin.Orders.Fields.RedeemedRewardPoints.Points").Text + "/" + Model.RedeemedRewardPointsAmount)
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.OrderTotal)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.OrderTotalOnRefund)
                    </div>
                </div>
                if (!String.IsNullOrEmpty(Model.RefundedAmount))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.RefundedAmount)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.RefundedAmount)
                        </div>
                    </div>
                }
                if (Model.UsedDiscounts.Count > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.UsedDiscounts)
                        </div>
                        <div class="col-md-9">
                            @for (int i = 0; i < Model.UsedDiscounts.Count; i++)
                            {
                                var discount = Model.UsedDiscounts[i];
                                <a href="@Url.Action("Edit", "Discount", new {id = discount.DiscountId})">@discount.DiscountName</a>
                                if (i != Model.UsedDiscounts.Count - 1)
                                {
                                    <text>,</text>
                                }
                            }
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Profit)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.Profit)
                    </div>
                </div>

                <div id="trEditOrderTotals">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderSubtotalInclTaxValue)
                        </div>
                        <div class="col-md-9">
                            @T("Admin.Orders.Fields.Edit.InclTax")<span class="margin-r-10 margin-l-5">@Html.NopEditorFor(model => model.OrderSubtotalInclTaxValue)</span>
                            @T("Admin.Orders.Fields.Edit.ExclTax")<span class="margin-l-5">@Html.NopEditorFor(model => model.OrderSubtotalExclTaxValue)</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderSubTotalDiscountInclTaxValue)
                        </div>
                        <div class="col-md-9">
                            @T("Admin.Orders.Fields.Edit.InclTax")<span class="margin-r-10 margin-l-5">@Html.NopEditorFor(model => model.OrderSubTotalDiscountInclTaxValue)</span>
                            @T("Admin.Orders.Fields.Edit.ExclTax")<span class="margin-l-5">@Html.NopEditorFor(model => model.OrderSubTotalDiscountExclTaxValue)</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderShippingInclTaxValue)
                        </div>
                        <div class="col-md-9">
                            @T("Admin.Orders.Fields.Edit.InclTax")<span class="margin-r-10 margin-l-5">@Html.NopEditorFor(model => model.OrderShippingInclTaxValue)</span>
                            @T("Admin.Orders.Fields.Edit.ExclTax")<span class="margin-l-5">@Html.NopEditorFor(model => model.OrderShippingExclTaxValue)</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)
                        </div>
                        <div class="col-md-9">
                            @T("Admin.Orders.Fields.Edit.InclTax")<span class="margin-r-10 margin-l-5">@Html.NopEditorFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)</span>
                            @T("Admin.Orders.Fields.Edit.ExclTax")<span class="margin-l-5">@Html.NopEditorFor(model => model.PaymentMethodAdditionalFeeExclTaxValue)</span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.TaxRatesValue)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.TaxRatesValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.TaxValue)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.TaxValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderTotalDiscountValue)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.OrderTotalDiscountValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.OrderTotalValue)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.OrderTotalValue)
                        </div>
                    </div>
                </div>
                if (!Model.IsReadOnly)
                {
                    if (Model.IsLoggedAs == "ADMIN")    /// NU-30
                    {
                        <div class="form-group">
                            <div class="col-md-9 col-md-offset-3">
                                <button type="submit" name="btnEditOrderTotals" onclick="toggleOrderTotals(true);return false;" id="btnEditOrderTotals" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.EditOrderTotals")
                                </button>

                                <button type="submit" name="btnSaveOrderTotals" id="btnSaveOrderTotals" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.SaveOrderTotals")
                                </button>
                                @Html.ActionConfirmation("btnSaveOrderTotals")

                                <button type="submit" name="btnCancelOrderTotals" onclick="toggleOrderTotals(false);return false;" id="btnCancelOrderTotals" class="btn bg-teal">
                                    @T("Admin.Orders.Fields.CancelOrderTotals")
                                </button>
                            </div>
                        </div>
                    }
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardType)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardType">
                                @Html.NopDisplayFor(model => model.CardType)
                            </div>
                            @Html.NopEditorFor(model => model.CardType)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardName)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardName">
                                @Html.NopDisplayFor(model => model.CardName)
                            </div>
                            @Html.NopEditorFor(model => model.CardName)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber || !String.IsNullOrEmpty(Model.CardNumber))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardNumber)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardNumber">
                                @Html.NopDisplayFor(model => model.CardNumber)
                            </div>
                            @Html.NopEditorFor(model => model.CardNumber)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardCvv2)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardCvv2">
                                @Html.NopDisplayFor(model => model.CardCvv2)
                            </div>
                            @Html.NopEditorFor(model => model.CardCvv2)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardExpirationMonth)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardExpirationMonth">
                                @Html.NopDisplayFor(model => model.CardExpirationMonth)
                            </div>
                            @Html.NopEditorFor(model => model.CardExpirationMonth)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CardExpirationYear)
                        </div>
                        <div class="col-md-9">
                            <div id="lblCardExpirationYear">
                                @Html.NopDisplayFor(model => model.CardExpirationYear)
                            </div>
                            @Html.NopEditorFor(model => model.CardExpirationYear)
                        </div>
                    </div>
                }
                if (Model.AllowStoringCreditCardNumber)
                {
                    <div class="form-group">
                        <div class="col-md-9 col-md-offset-3">
                            <button type="submit" name="btnEditCC" onclick="toggleCC(true);return false;" id="btnEditCC" class="btn btn-primary">
                                @T("Admin.Orders.Fields.EditCC")
                            </button>

                            <button type="submit" name="btnSaveCC" id="btnSaveCC" class="btn btn-primary">
                                @T("Admin.Orders.Fields.SaveCC")
                            </button>
                            @Html.ActionConfirmation("btnSaveCC")

                            <button type="submit" name="btnCancelCC" onclick="toggleCC(false);return false;" id="btnCancelCC" class="btn bg-teal">
                                @T("Admin.Orders.Fields.CancelCC")
                            </button>
                        </div>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.AuthorizationTransactionId))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AuthorizationTransactionId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.AuthorizationTransactionId)
                        </div>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.CaptureTransactionId))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CaptureTransactionId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.CaptureTransactionId)
                        </div>
                    </div>
                }
                if (!String.IsNullOrEmpty(Model.SubscriptionTransactionId))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.SubscriptionTransactionId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.SubscriptionTransactionId)
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.PaymentMethod)
                    </div>
                    <div class="col-md-9">
                        @Html.NopDisplayFor(model => model.PaymentMethod)
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.PaymentStatus)
                </div>
                <div class="col-md-9">
                    @Html.NopDisplayFor(model => model.PaymentStatus)
                </div>
            </div>
            @*@if (Model.CanCapture || Model.CanMarkOrderAsPaid || Model.CanRefund || Model.CanRefundOffline ||
                    Model.CanPartiallyRefund || Model.CanPartiallyRefundOffline || Model.CanVoid || Model.CanVoidOffline)
                {*@
            <div class="form-group">
                @if (!Model.IsReadOnly)
                {
                    <div class="col-md-9 col-md-offset-3">
                        @if (!Model.IsLoggedInAsVendor)
                        {
                            if (Model.CanCapture)
                            {
                                <button type="submit" name="captureorder" id="captureorder" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.Capture")
                                </button>
                                <text>&nbsp;</text>
                                @Html.ActionConfirmation("captureorder")
                            }
                            if (Model.CanMarkOrderAsPaid)
                            {
                                <button type="submit" name="markorderaspaid" id="markorderaspaid" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.MarkAsPaid")
                                </button>
                                <text>&nbsp;</text>
                                @Html.ActionConfirmation("markorderaspaid")
                            }

                            if (Model.CanRefund)
                            {
                                if (Model.IsLoggedAs == "ADMIN")
                                {
                                    <button type="submit" name="refundorder" id="refundorder" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.Refund")
                                    </button>
                                    <text>&nbsp;</text>
                                    @Html.ActionConfirmation("refundorder")
                                }
                            }
                            if (Model.CanRefundOffline)
                            {
                                if (Model.IsLoggedAs == "ADMIN")
                                {
                                    <button type="submit" name="refundorderoffline" id="refundorderoffline" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.RefundOffline")
                                    </button>
                                    <text>&nbsp;</text>
                                    @Html.ActionConfirmation("refundorderoffline")
                                }
                            }
                            if (Model.IsLoggedAs == "ADMIN")
                            {
                                if (Model.CanCustomRefund)
                                {
                                @*<button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new {id = Model.Id, online = true, btnId = "btnRefreshPage", formId = "order-form"}))', 500, 300, true); return false;" class="btn btn-primary">*@
                                <button type="submit" id="customrefundorder" name="customrefundorder" onclick="openCustomeRefundGrid(); return false;" class="btn btn-primary">
                                    Customized @T("Admin.Orders.Fields.PartialRefund")
                                </button>
                                <text>&nbsp;</text>
                                }
                            }
                            if (Model.IsLoggedAs == "ADMIN" && Model.IsPilot && Model.UseVertexForRefund)
                            {
                                if (Model.CanPartiallyRefund)
                                {
                                    @*<button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new {id = Model.Id, online = true, btnId = "btnRefreshPage", formId = "order-form"}))', 500, 300, true); return false;" class="btn btn-primary">*@
                                    <button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="openGrid();return false;" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.PartialRefund")
                                    </button>
                                    <text>&nbsp;</text>
                                }
                                if (Model.CanPartiallyRefundOffline)
                                {
                                    <button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="openGrid();return false;" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.PartialRefundOffline")
                                    </button>
                                    @*<button type="submit" id="partiallyrefundorderoffline" name="partiallyrefundorderoffline" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new { id = Model.Id, online = false, btnId = "btnRefreshPage", formId = "order-form" }))', 500, 300, true); return false;" class="btn btn-primary">
                                            @T("Admin.Orders.Fields.PartialRefundOffline")
                                        </button>*@
                                    <text>&nbsp;</text>
                                }
                            }
                            else if ((Model.IsLoggedAs == "ADMIN") && (!Model.IsPilot || !Model.UseVertexForRefund))
                            {
                                if (Model.CanPartiallyRefund)
                                {
                                    <button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new {id = Model.Id, online = true, btnId = "btnRefreshPage", formId = "order-form"}))', 500, 300, true); return false;" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.PartialRefund")
                                    </button>
                                    @*<button type="submit" id="partiallyrefundorder" name="partiallyrefundorder" onclick="openGrid();return false;" class="btn btn-primary">
                                            @T("Admin.Orders.Fields.PartialRefund")
                                        </button>*@
                                    <text>&nbsp;</text>
                                }
                                if (Model.CanPartiallyRefundOffline)
                                {
                                    <button type="submit" id="partiallyrefundorderoffline" name="partiallyrefundorderoffline" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new { id = Model.Id, online = false, btnId = "btnRefreshPage", formId = "order-form" }))', 500, 300, true); return false;" class="btn btn-primary">
                                        @T("Admin.Orders.Fields.PartialRefundOffline")
                                    </button>
                                    <text>&nbsp;</text>
                                }
                            }
                            if (Model.CanVoid)
                            {
                                <button type="submit" name="voidorder" id="voidorder" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.Void")
                                </button>
                                <text>&nbsp;</text>
                                @Html.ActionConfirmation("voidorder")
                            }
                            if (Model.CanVoidOffline)
                            {
                                <button type="submit" name="voidorderoffline" id="voidorderoffline" class="btn btn-primary">
                                    @T("Admin.Orders.Fields.VoidOffline")
                                </button>
                                <text>&nbsp;</text>
                                @Html.ActionConfirmation("voidorderoffline")
                            }
                        }
                    </div>
                }
            </div>

            <div id="gridPartialRefund">
                <div id="partiallyrefund-grid">
                </div>
                @if (Model.IsPilot && !Model.IsLoggedInAsVendor)
                {
                    <script>

                            function onDataBound(e) {
                                var view = this.dataSource.view();
                            }

                            function showDetails(e) {
                                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                                var jsondata = JSON.stringify(dataItem);
                                if (confirm("Are you sure you want to perform this action?")) {
                                    $.ajax({
                                        url: "@Url.Action("UpdateFullRefundData", "Order")",
                                        type: 'POST',
                                        data: jsondata,
                                        dataType: 'json',
                                        contentType: "application/json; charset=utf-8",
                                        success: function (data) {
                                            if (confirm("Fully Refunded! Order Screen needs to be refreshed. Click Ok to refresh the order Screen"));
                                            {
                                                window.location.reload();
                                            }
                                        },
                                        error: function (error) {
                                            if (error.Error != null || error.Error != undefined)
                                                alert(error.Error);
                                        }
                                    });
                                }
                            }

                            $(document).ready(function () {
                                $("#partiallyrefund-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("GetPartiallyRefundGridDetails", "Order", new { orderId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("UpdatePartiallyRefundData", "Order"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken,
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: function (e) {
                                                if (e.Error != null || e.Error != undefined)
                                                    alert(e.Error);
                                                if (e.Success != null || e.Success != undefined) {
                                                    if (confirm("Partially Refunded! Order Screen needs to be refreshed. Click Ok to refresh the order Screen"));
                                                    {
                                                        window.location.reload();
                                                    }
                                                }
                                            },
                                            model: {
                                                id: "ProductId",
                                                fields: {
                                                    OrderItemId: { editable: false, type: "decimal" },
                                                    //IsBundleProduct: { editable: false, type: "boolean" },
                                                    ProductName: { editable: false, type: "string" },
                                                    GLAmount1: { type: "decimal" },
                                                    GLAmount2: { type: "decimal" },
                                                    GLAmount3: { type: "decimal" },
                                                    TaxAmount1: { editable: false, type: "decimal" },
                                                    TaxAmount2: { editable: false, type: "decimal" },
                                                    TaxAmount3: { editable: false, type: "decimal" },
                                                    TotalRefund: { editable: false, type: "decimal" },
                                                    RefundedTaxAmount1: { editable: false, type: "decimal" },
                                                    RefundedTaxAmount2: { editable: false, type: "decimal" },
                                                    RefundedTaxAmount3: { editable: false, type: "decimal" },
                                                    DeliveryTaxName: { editable: false },
                                                    DeliveryTax: { editable: false, type: "decimal" },
                                                    ShippingTaxName: { editable: false },
                                                    ShippingTax: { editable: false, type: "decimal" },
                                                    DeliveryPickupAmount: { editable: false, type: "decimal" },
                                                    ShippingAmount: { editable: false, type: "decimal" },
                                                }
                                            }
                                        },
                                        requestEnd: function (e) {
                                            if (e.type == "update") {
                                                this.read();
                                            }
                                        },
                                        success: function (data) {
                                            confirm("Partial refund successful! Click ok to update the order screen");
                                        },
                                        error: function (e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                    },
                                    edit: function (e) {
                                        if (!e.model.isNew()) {
                                            if (e.container.find("input[name=GLAmount2]")) {
                                                if (e.model.GLAmount2 <= 0) {
                                                    e.container.find("input[name=GLAmount2]").attr("disabled", "disabled");
                                                }
                                            }
                                            if (e.container.find("input[name=GLAmount3]")) {
                                                if (e.model.GLAmount3 <= 0) {
                                                    e.container.find("input[name=GLAmount3]").attr("disabled", "disabled");
                                                }
                                            }
                                        }
                                    },
                                    editable: {
                                        confirmation: false,
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    autobind: true,
                                    //detailInit: detailInit_Refund,
                                    columns: [
                                    {
                                        field: "ProductName",
                                        title: "Product Name",
                                        width: 250,
                                        template: '<a href="@Url.Content("~/Admin/Product/Edit/")#= ProductId#">#= ProductName#</a> </br><span>Sku: #= Sku#</span>',
                                        width: "300px"
                                        },
                                        // {
                                        //     field: "IsBundleProduct",
                                        //     title: "IsBundleProduct",
                                        //width: 0,
                                       
                                        //},
                                    {
                                        field: "GLAmount1",
                                        title: "GL Code1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= GLAmount1#</span></br><span>#= GLCodeName1# </span>'
                                    },
                                    {
                                        field: "TaxAmount1",
                                        title: "Tax Code1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= TaxAmount1#</span></br><span>#= TaxName1# </span>'
                                    },
                                    {
                                        field: "RefundedTaxAmount1",
                                        title: "Refunded Tax1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= RefundedTaxAmount1#</span></br><span>#= TaxName1# </span>'
                                    },

                                     {
                                         field: "GLAmount2",
                                         title: "GL Code2",
                                         width: 250,
                                         format: "{0:c2}",
                                         template: '<span>$#= GLAmount2#</span></br><span>#= GLCodeName2# </span>'
                                     },
                                    {
                                        field: "TaxAmount2",
                                        title: "Tax Code2",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= TaxAmount2#</span></br><span>#= TaxName2# </span>'
                                    },
                                    {
                                        field: "RefundedTaxAmount2",
                                        title: "Refunded Tax2",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= RefundedTaxAmount2#</span></br><span>#= TaxName2# </span>'
                                    },
                                     {
                                         field: "GLAmount3",
                                         title: "GL Code3",
                                         width: 250,
                                         format: "{0:c2}",
                                         template: '<span>$#= GLAmount3#</span></br><span>#= GLCodeName3# </span>'
                                     },
                                        {
                                            field: "TaxAmount3",
                                            title: "Tax Code3",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= TaxAmount3#</span></br><span>#= TaxName3# </span>'
                                        },
                                        {
                                            field: "RefundedTaxAmount3",
                                            title: "Refunded Tax3",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= RefundedTaxAmount3#</span></br><span>#= TaxName3# </span>'
                                        },
                                        {
                                            field: "DeliveryPickupAmount",
                                            title: "Delivery Gl",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= DeliveryPickupAmount#</span></br><span>#= DeliveryGLCodeName# </span>'
                                        },
                                        {
                                            field: "DeliveryTax",
                                            title: "Delivery Tax",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= DeliveryTax#</span></br><span>#= DeliveryTaxName# </span>'
                                        },
                                        {
                                            field: "ShippingAmount",
                                            title: "Shipping Gl",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= ShippingAmount#</span></br><span>#= ShippingGlName# </span>'
                                        },
                                        {
                                            field: "ShippingTax",
                                            title: "Shipping Tax",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= ShippingTax#</span></br><span>#= ShippingTaxName# </span>',
                                        },
                                        {
                                            field: "TotalRefund",
                                            title: "Total Refund",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= TotalRefund#</span>'
                                        },
                                    {
                                        command: [
                                            {

                                                name: "edit",
                                                text: {
                                                    edit: "Edit Refund Amount",
                                                    update: "Partial Refund",
                                                    @*cancel: "@T("Admin.Common.Cancel")"*@
                                                },
                                            },
                                            {
                                                name: "refund",
                                                text: "Full Refund of this individual item",
                                                click: showDetails
                                            }
                                        ],
                                        title: "Action",
                                        width: 200
                                    }]
                                });
                            });

                        @* function detailInit_Refund(e) {
                              @if (e.data.)
                                $("<div/>").appendTo(e.detailCell).kendoGrid({
                               dataSource: {
                                   type: "json",
                                        transport: {
                                       read: {
                                           url: "@Html.Raw(Url.Action("GetTaxDetailsPerOrderItem", "Order"))?orderItemId=" + e.data.OrderItemId,
                                               type: "POST",
                                               dataType: "json",
                                               data: addAntiForgeryToken
                                           }
                                       },
                                        schema: {
                                       data: "Data",
                                            total: "Total",
                                            errors: function (e) {
                                               console.log(e.Error);
                                               if (e.Error != null || e.Error != undefined)
                                                   alert(e.Error);
                                               if (e.Success != null || e.Success != undefined) {
                                                   console.log(e.Error);
                                               }
                                           },
                                        },
                                    },
                                    columns: [
                                    {
                                   field: "ProductName_SB",
                                        title: "Product Name",
                                        width: 250,
                                            template:  '<span>$#= ProductName_SB#</span>',
                                        width: "300px"
                                    },
                                    {
                                   field: "GLAmount1_SB",
                                        title: "GL Code1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= GLAmount1_SB#</span></br><span>#= GLCodeName1_SB# </span>'
                                    },
                                    {
                                   field: "TaxAmount1_SB",
                                        title: "Tax Code1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= TaxAmount1_SB#</span></br><span>#= TaxName1_SB# </span>'
                                    },
                                    {
                                   field: "RefundedTaxAmount1_SB",
                                        title: "Refunded Tax1",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= RefundedTaxAmount1_SB#</span></br><span>#= TaxName1_SB# </span>'
                                    },

                                     {
                                   field: "GLAmount2_SB",
                                         title: "GL Code2",
                                         width: 250,
                                         format: "{0:c2}",
                                         template: '<span>$#= GLAmount2_SB#</span></br><span>#= GLCodeName2_SB# </span>'
                                     },
                                    {
                                   field: "TaxAmount2_SB",
                                        title: "Tax Code2",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= TaxAmount2_SB#</span></br><span>#= TaxName2_SB# </span>'
                                    },
                                    {
                                   field: "RefundedTaxAmount2_SB",
                                        title: "Refunded Tax2",
                                        format: "{0:c2}",
                                        width: 250,
                                        template: '<span>$#= RefundedTaxAmount2_SB#</span></br><span>#= TaxName2_SB# </span>'
                                    },
                                     {
                                   field: "GLAmount3_SB",
                                         title: "GL Code3",
                                         width: 250,
                                         format: "{0:c2}",
                                         template: '<span>$#= GLAmount3_SB#</span></br><span>#= GLCodeName3_SB# </span>'
                                     },
                                        {
                                   field: "TaxAmount3_SB",
                                            title: "Tax Code3",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= TaxAmount3_SB#</span></br><span>#= TaxName3_SB# </span>'
                                        },
                                        {
                                   field: "RefundedTaxAmount3_SB",
                                            title: "Refunded Tax3",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= RefundedTaxAmount3_SB#</span></br><span>#= TaxName3_SB# </span>'
                                        },
                                        {
                                   field: "DeliveryPickupAmount_SB",
                                            title: "Delivery Gl",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= DeliveryPickupAmount_SB#</span></br><span>#= DeliveryGLCodeName_SB# </span>'
                                        },
                                        {
                                   field: "DeliveryTax_SB",
                                            title: "Delivery Tax",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= DeliveryTax_SB#</span></br><span>#= DeliveryTaxName_SB# </span>'
                                        },
                                        {
                                   field: "ShippingAmount_SB",
                                            title: "Shipping Gl",
                                            format: "{0:c2}",
                                            width: 250,
                                            template: '<span>$#= ShippingAmount_SB#</span></br><span>#= ShippingGlName_SB# </span>'
                                        },
                                        {
                                   field: "ShippingTax_SB",
                                            title: "Shipping Tax",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= ShippingTax_SB#</span></br><span>#= ShippingTaxName_SB# </span>',
                                        },
                                        {
                                   field: "TotalRefund_SB",
                                            title: "Total Refund",
                                            width: 250,
                                            format: "{0:c2}",
                                            template: '<span>$#= TotalRefund_SB#</span>'
                                        },
                                        {
                                   command: [
                                                        {
                                       name: "edit",
                                                            text: {
                                           edit: "Edit Refund Amount",
                                                                    update: "Partial Refund",
                                                                  },
                                                        },
                                                        {
                                       name: "refund",
                                                                text: "Full Refund of this individual item",
                                                                    click: showDetails
                                                        }
                                                    ],
                                                        title: "Action",
                                                        width: 200
                                        }
                                    ]
                                });
                            }*@
                    </script>
                }
            </div>

            @if (!Model.IsLoggedInAsVendor)
            {
                <div id="gridCustomRefund">
                    <iframe name="GridPopupSource" id="GridPopupSource" style="overflow:hidden; overflow-y:hidden; border:0; width: -webkit-fill-available; height: 276px;"
                            src="@(Url.Action("CustomRefundOrderPopup", "Order", new { id = Model.Id, online = true, btnId = "btnRefreshPage", formId = "order-form" }))"></iframe>
                </div>
            }

            @* }*@
            @if (Model.CustomValues != null && Model.CustomValues.Count > 0)
            {
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.CustomValues)
                    </div>
                    <div class="col-md-9">
                        <div class="form-text-row">
                            @foreach (var item in Model.CustomValues)
                            {
                                <ul class="common-list">
                                    <li>
                                        @item.Key: @(item.Value != null ? item.Value.ToString() : "")
                                    </li>
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.CreatedOn)
                </div>
                <div class="col-md-9">
                    @Html.NopDisplayFor(model => model.CreatedOn)
                </div>
            </div>
        </div>
    </div>
</div>